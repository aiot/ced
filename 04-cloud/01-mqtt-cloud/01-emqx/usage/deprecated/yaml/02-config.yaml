# https://www.emqx.io/docs/zh/v4.4/getting-started/config.html
# https://docs.emqx.com/zh/enterprise/v4.4/getting-started/config.html
# https://www.emqx.io/docs/zh/v4.4/tutorial/tune.html

# https://github.com/emqx/emqx/blob/v{{kubethings.aiot.cloud.emqx.app.version}}/deploy/charts/emqx/templates/configmap.env.yaml
# https://www.emqx.io/docs/zh/v4.4/configuration/environment-variable.html
---
kind: ConfigMap
apiVersion: v1
metadata:
  namespace: &app-namespace aiot-case
  name: emqx-env
immutable: false
data:
  EMQX_CLUSTER__DISCOVERY: k8s
  EMQX_CLUSTER__K8S__APISERVER: https://kube-apiserver.kube-system.svc.cluster.local:{{kube.apiserver.port}}
  EMQX_CLUSTER__K8S__APP_NAME: emqx
  EMQX_CLUSTER__K8S__ADDRESS_TYPE: hostname
  EMQX_CLUSTER__K8S__SERVICE_NAME: emqx-discovery
  EMQX_CLUSTER__K8S__NAMESPACE: *app-namespace
  EMQX_CLUSTER__K8S__SUFFIX: svc.cluster.local

  # # erlang unique identifier
  # EMQX_NODE__NAME: ${EMQX_CLUSTER__K8S__APP_NAME}@${POD_NAME}.${EMQX_CLUSTER__K8S__SERVICE_NAME}.${EMQX_CLUSTER__K8S__NAMESPACE}.${EMQX_CLUSTER__K8S__SUFFIX}
  EMQX_NODE__COOKIE: *app-namespace

  # note: this is a fake value, please replace it with the actual value
  EMQX_WEB__HOOK__URL: https://emqx-webhook-server.${POD_NAMESPACE}.svc.cluster.local

# https://www.emqx.io/docs/zh/v4.4/configuration/configuration.html
---
kind: ConfigMap
apiVersion: v1
metadata:
  namespace: aiot-case
  name: emqx
immutable: false
data:
  # https://github.com/emqx/emqx/blob/v{{kubethings.aiot.cloud.emqx.app.version}}/etc/emqx.conf
  emqx.conf: |

    # https://www.emqx.io/docs/zh/v4.4/configuration/configuration.html#mqtt
    # CONFIG_SECTION_BGN=mqtt
    flapping_detect_policy = 30, 1m, 5m
    mqtt.max_clientid_len = 65535
    mqtt.max_packet_size = 1MB
    mqtt.max_qos_allowed = 2
    mqtt.max_topic_levels = 128
    mqtt.max_topic_alias = 65535
    mqtt.strict_mode = false
    mqtt.retain_available = true
    mqtt.response_information = server-received
    mqtt.wildcard_subscription = true
    mqtt.shared_subscription = true
    mqtt.ignore_loop_deliver = false
    # CONFIG_SECTION_END=mqtt

    # https://www.emqx.io/docs/zh/v4.4/configuration/configuration.html#broker
    # CONFIG_SECTION_BGN=broker
    broker.shared_dispatch_ack_enabled = true
    # CONFIG_SECTION_END=broker

    # https://www.emqx.io/docs/zh/v4.4/getting-started/cluster.html
    # https://www.emqx.io/docs/zh/v4.4/advanced/cluster.html
    # https://www.emqx.io/docs/zh/v4.4/configuration/configuration.html#cluster
    # CONFIG_SECTION_BGN=cluster
    cluster.name = mqtt-cloud
    # cluster.discovery = k8s
    # cluster.k8s.apiserver = https://kube-apiserver.kube-system.svc.cluster.local:{{kube.apiserver.port}}
    # cluster.k8s.app_name = emqx
    # cluster.k8s.address_type = hostname
    # cluster.k8s.service_name = emqx-discovery
    # cluster.k8s.namespace = aiot-case
    # cluster.k8s.suffix = svc.cluster.local
    # warning: ekka does not support inet_tls
    cluster.proto_dist = inet_tcp
    cluster.autoheal = on
    cluster.autoclean = 300s
    # CONFIG_SECTION_END=cluster

    # https://www.emqx.io/docs/zh/v4.4/configuration/configuration.html#node
    # CONFIG_SECTION_BGN=node
    # node.name = emqx@${POD_NAME}.${SERVICE_NAME}.${POD_NAMESPACE}.svc.cluster.local
    node.dist_listen_min = 6369
    node.dist_listen_max = 6369
    node.ssl_dist_optfile = etc/ssl_dist.conf
    node.async_threads = 8
    node.process_limit = 2097152
    node.max_ets_tables = 2097152
    node.max_ports = 1048576
    node.dist_buffer_size = 8MB
    node.global_gc_interval = 15m
    # warning: must be on, otherwise emqx will be fatal
    node.heartbeat = on
    # node.cookie = mqtt-cloud
    node.data_dir = data
    node.crash_dump = log/crash.dump
    # CONFIG_SECTION_END=node

    # https://www.emqx.io/docs/zh/v4.4/configuration/configuration.html#rpc
    # CONFIG_SECTION_BGN=rpc
    rpc.mode = async
    rpc.async_batch_size = 512
    rpc.port_discovery = stateless
    rpc.driver = ssl
    rpc.default_client_driver = ssl
    rpc.keyfile = etc/pki/tls.key
    rpc.certfile = etc/pki/tls.crt
    rpc.cacertfile = etc/pki/ca.crt
    rpc.connect_timeout = 10s
    rpc.authentication_timeout = 5s
    rpc.send_timeout = 5s
    rpc.call_receive_timeout = 15s
    rpc.socket_keepalive_idle = 300s
    rpc.socket_keepalive_count = 5
    rpc.socket_keepalive_interval = 60s
    rpc.socket_sndbuf = 1MB
    rpc.socket_recbuf = 1MB
    rpc.socket_buffer = 1MB
    # CONFIG_SECTION_END=rpc

    # CONFIG_SECTION_BGN=zones
    # https://www.emqx.io/docs/zh/v4.4/configuration/configuration.html#zoneinternal
    zone.internal.bypass_auth_plugins = true
    zone.internal.allow_anonymous = true
    zone.internal.enable_acl = off
    zone.internal.acl_deny_action = ignore
    zone.internal.enable_flapping_detect = off
    zone.internal.strict_mode = false
    zone.internal.wildcard_subscription = true
    zone.internal.shared_subscription = true
    zone.internal.max_subscriptions = 0
    zone.internal.ignore_loop_deliver = false
    zone.internal.enable_stats = on
    # https://www.emqx.io/docs/zh/v4.4/configuration/configuration.html#zoneexternal
    zone.external.enable_acl = on
    zone.external.enable_ban = on
    zone.external.acl_deny_action = disconnect
    zone.external.use_username_as_clientid = false
    zone.external.max_clientid_len = 65535
    zone.external.max_packet_size = 1MB
    zone.external.max_qos_allowed = 2
    zone.external.upgrade_qos = off
    zone.external.max_inflight = 128
    zone.external.max_awaiting_rel = 1024
    zone.external.max_mqueue_len = 10240
    zone.external.max_topic_levels = 128
    zone.external.max_topic_alias = 65535
    zone.external.strict_mode = false
    zone.external.retain_available = true
    zone.external.wildcard_subscription = true
    zone.external.shared_subscription = true
    zone.external.max_subscriptions = 0
    zone.external.retry_interval = 10s
    zone.external.idle_timeout = 15s
    zone.external.session_expiry_interval = 60m
    zone.external.server_keepalive = 200
    zone.external.keepalive_backoff = 0.75
    zone.external.enable_stats = on
    zone.external.conn_congestion.alarm = on
    zone.external.conn_congestion.min_alarm_sustain_duration = 2m
    # CONFIG_SECTION_END=zones

    # CONFIG_SECTION_BGN=listeners
    # https://www.emqx.io/docs/zh/v4.4/configuration/configuration.html#tcpinternal
    listener.tcp.internal = 127.0.0.1:11883
    listener.tcp.internal.acceptors = 8
    listener.tcp.internal.zone = internal
    listener.tcp.internal.max_connections = 1048576
    listener.tcp.internal.max_conn_rate = 1024
    listener.tcp.internal.active_n = 1024
    listener.tcp.internal.backlog = 1024
    listener.tcp.internal.send_timeout = 5s
    listener.tcp.internal.send_timeout_close = on
    listener.tcp.internal.recbuf = 64KB
    listener.tcp.internal.sndbuf = 64KB
    listener.tcp.internal.buffer = 16KB
    listener.tcp.internal.reuseaddr = true
    listener.tcp.internal.nodelay = false
    # https://www.emqx.io/docs/zh/v4.4/configuration/configuration.html#tcpexternal
    listener.tcp.external = 127.0.0.1:1883
    # note: whether to use the CN field of certificate as username and clientid
    # # listener.tcp.external.peer_cert_as_username = cn
    # # listener.tcp.external.peer_cert_as_clientid = cn
    listener.tcp.external.acceptors = 8
    listener.tcp.external.zone = external
    listener.tcp.external.access.1 = allow all
    listener.tcp.external.max_connections = 1048576
    listener.tcp.external.max_conn_rate = 1024
    listener.tcp.external.active_n = 1024
    listener.tcp.external.backlog = 1024
    listener.tcp.external.send_timeout = 15s
    listener.tcp.external.send_timeout_close = on
    listener.tcp.external.reuseaddr = true
    listener.tcp.external.nodelay = true
    # warning: must be off, otherwise mqtt-client will not be able to publish messages
    listener.tcp.external.proxy_protocol = off
    listener.tcp.external.proxy_protocol_timeout = 5s
    # https://www.emqx.io/docs/zh/v4.4/configuration/configuration.html#tlsexternal
    listener.ssl.external = 0.0.0.0:8883
    listener.ssl.external.keyfile = etc/pki/tls.key
    listener.ssl.external.certfile = etc/pki/tls.crt
    listener.ssl.external.cacertfile = etc/pki/ca.crt
    listener.ssl.external.depth = 0
    listener.ssl.external.verify = verify_peer
    listener.ssl.external.fail_if_no_peer_cert = true
    # note: whether to use the CN field of certificate as username and clientid
    # # listener.ssl.external.peer_cert_as_username = cn
    # # listener.ssl.external.peer_cert_as_clientid = cn
    listener.ssl.external.handshake_timeout = 15s
    listener.ssl.external.tls_versions = tlsv1.3,tlsv1.2
    # warning: this value must not be changed, otherwise tls will not work
    listener.ssl.external.ciphers = TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_CHACHA20_POLY1305_SHA256,TLS_AES_128_CCM_SHA256,TLS_AES_128_CCM_8_SHA256,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-RSA-AES256-GCM-SHA384,ECDHE-ECDSA-AES256-SHA384,ECDHE-RSA-AES256-SHA384,ECDHE-ECDSA-DES-CBC3-SHA,ECDH-ECDSA-AES256-GCM-SHA384,ECDH-RSA-AES256-GCM-SHA384,ECDH-ECDSA-AES256-SHA384,ECDH-RSA-AES256-SHA384,DHE-DSS-AES256-GCM-SHA384,DHE-DSS-AES256-SHA256,AES256-GCM-SHA384,AES256-SHA256,ECDHE-ECDSA-AES128-GCM-SHA256,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES128-SHA256,ECDHE-RSA-AES128-SHA256,ECDH-ECDSA-AES128-GCM-SHA256,ECDH-RSA-AES128-GCM-SHA256,ECDH-ECDSA-AES128-SHA256,ECDH-RSA-AES128-SHA256,DHE-DSS-AES128-GCM-SHA256,DHE-DSS-AES128-SHA256,AES128-GCM-SHA256,AES128-SHA256,ECDHE-ECDSA-AES256-SHA,ECDHE-RSA-AES256-SHA,DHE-DSS-AES256-SHA,ECDH-ECDSA-AES256-SHA,ECDH-RSA-AES256-SHA,AES256-SHA,ECDHE-ECDSA-AES128-SHA,ECDHE-RSA-AES128-SHA,DHE-DSS-AES128-SHA,ECDH-ECDSA-AES128-SHA,ECDH-RSA-AES128-SHA,AES128-SHA
    listener.ssl.external.honor_cipher_order = on
    listener.ssl.external.secure_renegotiate = on
    listener.ssl.external.reuse_sessions = on
    listener.ssl.external.acceptors = 16
    listener.ssl.external.zone = external
    listener.ssl.external.access.1 = allow all
    listener.ssl.external.max_connections = 1048576
    listener.ssl.external.max_conn_rate = 1024
    listener.ssl.external.active_n = 1024
    listener.ssl.external.backlog = 1024
    listener.ssl.external.send_timeout = 15s
    listener.ssl.external.send_timeout_close = on
    listener.ssl.external.reuseaddr = true
    listener.ssl.external.nodelay = true
    # warning: must be off, otherwise mqtt-client will not be able to publish messages
    listener.ssl.external.proxy_protocol = off
    listener.ssl.external.proxy_protocol_timeout = 5s
    # https://www.emqx.io/docs/zh/v4.4/configuration/configuration.html#wsexternal
    listener.ws.external = 127.0.0.1:8083
    listener.ws.external.mqtt_path = /mqtt
    # note: whether to use the CN field of certificate as username and clientid
    # # listener.ws.external.peer_cert_as_username = cn
    # # listener.ws.external.peer_cert_as_clientid = cn
    listener.ws.external.acceptors = 8
    listener.ws.external.zone = external
    listener.ws.external.access.1 = allow all
    listener.ws.external.idle_timeout = 60s
    listener.ws.external.max_connections = 1048576
    listener.ws.external.max_conn_rate = 1024
    listener.ws.external.active_n = 1024
    listener.ws.external.backlog = 1024
    listener.ws.external.send_timeout = 15s
    listener.ws.external.send_timeout_close = on
    listener.ws.external.nodelay = true
    listener.ws.external.supported_subprotocols = mqtt-v5, mqtt-v3.1.1, mqtt-v3, mqtt
    listener.ws.external.fail_if_no_subprotocol = false
    listener.ws.external.mqtt_piggyback = multiple
    listener.ws.external.compress = true
    listener.ws.external.check_origin_enable = false
    listener.ws.external.allow_origin_absence = true
    listener.ws.external.check_origins = http://127.0.0.1:8083, http://localhost:8083
    # warning: must be off, otherwise mqtt-client will not be able to publish messages
    listener.ws.external.proxy_protocol = off
    listener.ws.external.proxy_protocol_timeout = 5s
    listener.ws.external.proxy_address_header = X-Forwarded-For
    listener.ws.external.proxy_port_header = X-Forwarded-Port
    # https://www.emqx.io/docs/zh/v4.4/configuration/configuration.html#wssexternal
    listener.wss.external = 0.0.0.0:8084
    listener.wss.external.mqtt_path = /mqtt
    listener.wss.external.keyfile = etc/pki/tls.key
    listener.wss.external.certfile = etc/pki/tls.crt
    listener.wss.external.cacertfile = etc/pki/ca.crt
    listener.wss.external.depth = 0
    listener.wss.external.verify = verify_peer
    listener.wss.external.fail_if_no_peer_cert = true
    # note: whether to use the CN field of certificate as username and clientid
    # # listener.wss.external.peer_cert_as_username = cn
    # # listener.wss.external.peer_cert_as_clientid = cn
    listener.wss.external.tls_versions = tlsv1.3,tlsv1.2
    # warning: this value must not be changed, otherwise tls will not work
    listener.wss.external.ciphers = TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_CHACHA20_POLY1305_SHA256,TLS_AES_128_CCM_SHA256,TLS_AES_128_CCM_8_SHA256,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-RSA-AES256-GCM-SHA384,ECDHE-ECDSA-AES256-SHA384,ECDHE-RSA-AES256-SHA384,ECDHE-ECDSA-DES-CBC3-SHA,ECDH-ECDSA-AES256-GCM-SHA384,ECDH-RSA-AES256-GCM-SHA384,ECDH-ECDSA-AES256-SHA384,ECDH-RSA-AES256-SHA384,DHE-DSS-AES256-GCM-SHA384,DHE-DSS-AES256-SHA256,AES256-GCM-SHA384,AES256-SHA256,ECDHE-ECDSA-AES128-GCM-SHA256,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES128-SHA256,ECDHE-RSA-AES128-SHA256,ECDH-ECDSA-AES128-GCM-SHA256,ECDH-RSA-AES128-GCM-SHA256,ECDH-ECDSA-AES128-SHA256,ECDH-RSA-AES128-SHA256,DHE-DSS-AES128-GCM-SHA256,DHE-DSS-AES128-SHA256,AES128-GCM-SHA256,AES128-SHA256,ECDHE-ECDSA-AES256-SHA,ECDHE-RSA-AES256-SHA,DHE-DSS-AES256-SHA,ECDH-ECDSA-AES256-SHA,ECDH-RSA-AES256-SHA,AES256-SHA,ECDHE-ECDSA-AES128-SHA,ECDHE-RSA-AES128-SHA,DHE-DSS-AES128-SHA,ECDH-ECDSA-AES128-SHA,ECDH-RSA-AES128-SHA,AES128-SHA
    listener.wss.external.honor_cipher_order = on
    listener.wss.external.secure_renegotiate = on
    listener.wss.external.reuse_sessions = on
    listener.wss.external.acceptors = 16
    listener.wss.external.zone = external
    listener.wss.external.access.1 = allow all
    listener.wss.external.idle_timeout = 60s
    listener.wss.external.max_connections = 1048576
    listener.wss.external.max_conn_rate = 1024
    listener.wss.external.active_n = 1024
    listener.wss.external.backlog = 1024
    listener.wss.external.send_timeout = 15s
    listener.wss.external.send_timeout_close = on
    listener.wss.external.nodelay = true
    listener.wss.external.supported_subprotocols = mqtt-v5, mqtt-v3.1.1, mqtt-v3, mqtt
    listener.wss.external.fail_if_no_subprotocol = false
    listener.wss.external.mqtt_piggyback = multiple
    listener.wss.external.compress = true
    listener.wss.external.check_origin_enable = false
    listener.wss.external.allow_origin_absence = true
    listener.wss.external.check_origins = https://127.0.0.1:8084, https://localhost:8084
    # warning: must be off, otherwise mqtt-client will not be able to publish messages
    listener.wss.external.proxy_protocol = off
    listener.wss.external.proxy_protocol_timeout = 5s
    listener.wss.external.proxy_address_header = X-Forwarded-For
    listener.wss.external.proxy_port_header = X-Forwarded-Port
    # CONFIG_SECTION_END=listeners

    # https://www.emqx.io/docs/zh/v4.4/configuration/configuration.html#authacl
    # CONFIG_SECTION_BGN=authacl
    acl_file = etc/acl.conf
    allow_anonymous = false
    acl_nomatch = deny
    acl_deny_action = disconnect
    enable_acl_cache = on
    acl_cache_ttl = 1m
    acl_cache_max_size = 32
    # CONFIG_SECTION_END=authacl

    # CONFIG_SECTION_BGN=modules
    modules.loaded_file = data/loaded_modules
    module.presence.qos = 1
    module.slow_subs.threshold = 300ms
    module.slow_subs.stats_type = whole
    module.slow_subs.expire_interval = 10m
    module.slow_subs.top_k_num = 30
    # CONFIG_SECTION_END=modules

    # https://www.emqx.io/docs/zh/v4.4/configuration/configuration.html#plugins
    # CONFIG_SECTION_BGN=plugins
    plugins.etc_dir = etc/plugins/
    plugins.expand_plugins_dir = etc/plugins/
    plugins.loaded_file = data/loaded_plugins
    # CONFIG_SECTION_END=plugins

    # https://www.emqx.io/docs/zh/v4.4/configuration/configuration.html#monitor
    # CONFIG_SECTION_BGN=sys_mon
    os_mon.mem_check_interval = 60s
    os_mon.sysmem_high_watermark = 85%
    os_mon.procmem_high_watermark = 5%
    os_mon.cpu_check_interval = 60s
    os_mon.cpu_high_watermark = 85%
    os_mon.cpu_low_watermark = 75%
    sysmon.busy_port = true
    sysmon.busy_dist_port = true
    vm_mon.check_interval = 30s
    vm_mon.process_high_watermark = 85%
    vm_mon.process_low_watermark = 75%
    alarm.actions = log,publish
    alarm.validity_period = 24h
    alarm.size_limit = 256
    # CONFIG_SECTION_END=sys_mon

    # https://www.emqx.io/docs/zh/v4.4/getting-started/log.html
    # https://www.emqx.io/docs/zh/v4.4/configuration/configuration.html#log
    # CONFIG_SECTION_BGN=logger
    log.to = console
    log.formatter = text
    log.single_line = true
    log.chars_limit = -1
    log.max_depth = unlimited
    log.level = info
    log.dir = log
    log.rotation = on
    # CONFIG_SECTION_END=logger

  # https://github.com/emqx/emqx/blob/v{{kubethings.aiot.cloud.emqx.app.version}}/etc/ssl_dist.conf
  ssl-dist.conf: |

    [
      {
        server,
        [
          { keyfile, "etc/pki/tls.key" },
          { certfile, "etc/pki/tls.crt" },
          { cacertfile, "etc/pki/ca.crt" },
          { secure_renegotiate, true },
          { depth, 0 }
        ]
      },
      {
        client,
        [
          { keyfile, "etc/pki/tls.key" },
          { certfile, "etc/pki/tls.crt" },
          { cacertfile, "etc/pki/ca.crt" },
          { secure_renegotiate, true }
        ]
      }
    ].


  # authentication: https://www.emqx.io/docs/zh/v4.4/advanced/auth.html
  # authorization: https://www.emqx.io/docs/zh/v4.4/advanced/acl.html

  # https://github.com/emqx/emqx/blob/v{{kubethings.aiot.cloud.emqx.app.version}}/apps/emqx_auth_mnesia/etc/emqx_auth_mnesia.conf
  # https://www.emqx.io/docs/zh/v4.4/advanced/auth-mnesia.html
  auth-mnesia.conf: |

    auth.mnesia.password_hash = sha256

    auth.user.1.username = edge-app
    auth.user.1.password = edge-app
    auth.user.2.username = mqtt-edge
    auth.user.2.password = mqtt-edge
    auth.user.3.username = mqttx
    auth.user.3.password = mqttx

  # https://github.com/emqx/emqx/blob/v{{kubethings.aiot.cloud.emqx.app.version}}/apps/emqx_auth_jwt/etc/emqx_auth_jwt.conf
  # https://www.emqx.io/docs/zh/v4.4/configuration/configuration.html#插件-emqx-auth-jwt
  # https://www.emqx.io/docs/zh/v4.4/advanced/auth-jwt.html
  auth-jwt.conf: |

  # https://github.com/emqx/emqx/blob/v{{kubethings.aiot.cloud.emqx.app.version}}/etc/acl.conf
  # https://github.com/emqx/emqx/blob/v{{kubethings.aiot.cloud.emqx.app.version}}/deploy/charts/emqx/templates/configmap.acl.yaml
  # https://www.emqx.io/docs/zh/v4.4/advanced/acl-file.html
  acl.conf: |


  # retain message
  # https://github.com/emqx/emqx/blob/v{{kubethings.aiot.cloud.emqx.app.version}}/apps/emqx_retainer/etc/emqx_retainer.conf
  # https://www.emqx.io/docs/zh/v4.4/configuration/configuration.html#插件emqx-retainer
  # https://www.emqx.io/docs/zh/v4.4/advanced/retained.html
  retainer.conf: |

    retainer.storage_type = disc_only
    retainer.max_payload_size = 256KB
    retainer.max_retained_messages = 0
    retainer.expiry_interval = 16m
    retainer.stop_publish_clear_msg = false

  # https://github.com/emqx/emqx/blob/v{{kubethings.aiot.cloud.emqx.app.version}}/apps/emqx_bridge_mqtt/etc/emqx_bridge_mqtt.conf
  # https://www.emqx.io/docs/zh/v4.4/configuration/configuration.html#插件-emqx-bridge-mqtt
  # https://www.emqx.io/docs/zh/v4.4/advanced/bridge.html
  # https://www.emqx.io/docs/zh/v4.4/bridge/bridge.html
  # https://www.emqx.io/docs/zh/v4.4/bridge/bridge-mqtt.html
  bridge-mqtt.conf: |

    bridge.mqtt.mqttcloud.start_type = manual

    # bridge.mqtt.mqttcloud.address = mqtt-cloud.${POD_NAMESPACE}.svc.cluster.local:8883
    bridge.mqtt.mqttcloud.proto_ver = mqttv5
    bridge.mqtt.mqttcloud.ssl = on
    bridge.mqtt.mqttcloud.verify = true
    bridge.mqtt.mqttcloud.server_name_indication = disable
    bridge.mqtt.mqttcloud.keyfile = etc/pki/mqtt-cloud.client.tls.key
    bridge.mqtt.mqttcloud.certfile = etc/pki/mqtt-cloud.client.tls..crt
    bridge.mqtt.mqttcloud.cacertfile = etc/pki/mqtt-cloud.ca.crt
    bridge.mqtt.mqttcloud.username = mqtt-edge
    bridge.mqtt.mqttcloud.password = mqtt-edge
    bridge.mqtt.mqttcloud.keepalive = 60s
    bridge.mqtt.mqttcloud.reconnect_interval = 20s
    bridge.mqtt.mqttcloud.clean_start = true

    # bridge.mqtt.mqttcloud.clientid = ${POD_NAMESPACE}_${NODE_NAME}_${NODE_IP}
    bridge.mqtt.mqttcloud.bridge_mode = true
    # publish(push) message to mqtt-cloud
    bridge.mqtt.mqttcloud.forwards = device001/#,device002/#
    bridge.mqtt.mqttcloud.batch_size = 64
    bridge.mqtt.mqttcloud.max_inflight_batches = 64
    bridge.mqtt.mqttcloud.retry_interval = 10s
    # subscribe(pull) message from mqtt-cloud
    bridge.mqtt.mqttcloud.subscription.1.topic = command/device001
    bridge.mqtt.mqttcloud.subscription.1.qos = 1
    bridge.mqtt.mqttcloud.subscription.2.topic = command/device002
    bridge.mqtt.mqttcloud.subscription.2.qos = 1

    # cache
    bridge.mqtt.mqttcloud.queue.replayq_dir = data/bridge/
    bridge.mqtt.mqttcloud.queue.replayq_seg_bytes = 128MB
    bridge.mqtt.mqttcloud.queue.max_total_size = 2048MB

  # https://github.com/emqx/emqx/blob/v{{kubethings.aiot.cloud.emqx.app.version}}/apps/emqx_web_hook/etc/emqx_web_hook.conf
  # https://www.emqx.io/docs/zh/v4.4/configuration/configuration.html#插件emqx-web-hook
  # https://www.emqx.io/docs/zh/v4.4/advanced/webhook.html
  webhook.conf: |

    # send notify to some http server
    # web.hook.url = https://emqx-webhook-server.${POD_NAMESPACE}.svc.cluster.local
    web.hook.ssl.verify = false
    web.hook.ssl.server_name_indication = disable
    # web.hook.ssl.keyfile =
    # web.hook.ssl.certfile =
    # web.hook.ssl.cacertfile =
    web.hook.headers.content-type = application/json
    web.hook.body.encoding_of_payload_field = plain
    web.hook.enable_pipelining = true
    web.hook.pool_size = 32

    # event
    # web.hook.rule.<hook-name>.<number> = <event>
    # client online
    # web.hook.rule.client.connected.1 = {"action": "on_client_connected"}
    # client offline
    # web.hook.rule.client.disconnected.1 = {"action": "on_client_disconnected"}
    # server receives the ACK message that sent by client
    # web.hook.rule.message.acked.1 = {"action": "on_message_acked"}

  # https://github.com/emqx/emqx/blob/v{{kubethings.aiot.cloud.emqx.app.version}}/apps/emqx_rule_engine/etc/emqx_rule_engine.conf
  # https://www.emqx.io/docs/zh/v4.4/configuration/configuration.html#插件emqx-rule-engine
  rule-engine.conf: |

    rule_engine.ignore_sys_message = on

    rule_engine.events.client_connected = on, qos1
    rule_engine.events.client_disconnected = on, qos1
    rule_engine.events.session_subscribed = off
    rule_engine.events.session_unsubscribed = off
    rule_engine.events.message_delivered = off
    rule_engine.events.message_acked = on, qos1
    rule_engine.events.message_dropped = off


  # https://github.com/emqx/emqx/blob/v{{kubethings.aiot.cloud.emqx.app.version}}/apps/emqx_management/etc/emqx_management.conf
  # https://www.emqx.io/docs/zh/v4.4/configuration/configuration.html#插件-emqx-management
  api.conf: |

    management.listener.http = 8081
    management.listener.http.inet6 = false
    management.listener.http.ipv6_v6only = false
    management.listener.http.acceptors = 8
    management.listener.http.max_clients = 1024
    management.listener.http.backlog = 1024
    management.listener.http.send_timeout = 15s
    management.listener.http.send_timeout_close = on

    management.listener.https = 8082
    management.listener.https.inet6 = false
    management.listener.https.ipv6_v6only = false
    management.listener.https.keyfile = etc/pki/tls.key
    management.listener.https.certfile = etc/pki/tls.crt
    management.listener.https.cacertfile = etc/pki/ca.crt
    management.listener.https.verify = verify_peer
    management.listener.https.fail_if_no_peer_cert = true
    management.listener.https.tls_versions = tlsv1.3,tlsv1.2
    # warning: this value must not be changed, otherwise tls will not work
    management.listener.https.ciphers = TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_CHACHA20_POLY1305_SHA256,TLS_AES_128_CCM_SHA256,TLS_AES_128_CCM_8_SHA256,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-RSA-AES256-GCM-SHA384,ECDHE-ECDSA-AES256-SHA384,ECDHE-RSA-AES256-SHA384,ECDHE-ECDSA-DES-CBC3-SHA,ECDH-ECDSA-AES256-GCM-SHA384,ECDH-RSA-AES256-GCM-SHA384,ECDH-ECDSA-AES256-SHA384,ECDH-RSA-AES256-SHA384,DHE-DSS-AES256-GCM-SHA384,DHE-DSS-AES256-SHA256,AES256-GCM-SHA384,AES256-SHA256,ECDHE-ECDSA-AES128-GCM-SHA256,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES128-SHA256,ECDHE-RSA-AES128-SHA256,ECDH-ECDSA-AES128-GCM-SHA256,ECDH-RSA-AES128-GCM-SHA256,ECDH-ECDSA-AES128-SHA256,ECDH-RSA-AES128-SHA256,DHE-DSS-AES128-GCM-SHA256,DHE-DSS-AES128-SHA256,AES128-GCM-SHA256,AES128-SHA256,ECDHE-ECDSA-AES256-SHA,ECDHE-RSA-AES256-SHA,DHE-DSS-AES256-SHA,ECDH-ECDSA-AES256-SHA,ECDH-RSA-AES256-SHA,AES256-SHA,ECDHE-ECDSA-AES128-SHA,ECDHE-RSA-AES128-SHA,DHE-DSS-AES128-SHA,ECDH-ECDSA-AES128-SHA,ECDH-RSA-AES128-SHA,AES128-SHA
    management.listener.https.acceptors = 8
    management.listener.https.max_clients = 1024
    management.listener.https.backlog = 1024
    management.listener.https.send_timeout = 15s
    management.listener.https.send_timeout_close = on

    # management.application.default_secret = mqtt-cloud
    # management.default_application.id = mqtt-cloud
    # management.default_application.secret = mqtt-cloud
    management.max_row_limit = 10240

  # https://github.com/emqx/emqx/blob/v{{kubethings.aiot.cloud.emqx.app.version}}/lib-ce/emqx_dashboard/etc/emqx_dashboard.conf
  # https://www.emqx.io/docs/zh/v4.4/configuration/configuration.html#插件-emqx-dashboard
  # https://www.emqx.io/docs/zh/v4.4/getting-started/dashboard.html
  dashboard.conf: |

    dashboard.listener.http = 18083
    dashboard.listener.http.inet6 = false
    dashboard.listener.http.ipv6_v6only = false
    dashboard.listener.http.acceptors = 8
    dashboard.listener.http.max_clients = 128

    dashboard.listener.https = 18084
    dashboard.listener.https.inet6 = false
    dashboard.listener.https.ipv6_v6only = false
    dashboard.listener.https.keyfile = etc/pki/tls.key
    dashboard.listener.https.certfile = etc/pki/tls.crt
    dashboard.listener.https.cacertfile = etc/pki/ca.crt
    # # bug: can not set dashboard.listener.https.verify, neither verify_none nor verify_peer
    # dashboard.listener.https.verify = verify_none
    dashboard.listener.https.fail_if_no_peer_cert = false
    dashboard.listener.https.tls_versions = tlsv1.3,tlsv1.2
    # warning: this value must not be changed, otherwise tls will not work
    dashboard.listener.https.ciphers = TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_CHACHA20_POLY1305_SHA256,TLS_AES_128_CCM_SHA256,TLS_AES_128_CCM_8_SHA256,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-RSA-AES256-GCM-SHA384,ECDHE-ECDSA-AES256-SHA384,ECDHE-RSA-AES256-SHA384,ECDHE-ECDSA-DES-CBC3-SHA,ECDH-ECDSA-AES256-GCM-SHA384,ECDH-RSA-AES256-GCM-SHA384,ECDH-ECDSA-AES256-SHA384,ECDH-RSA-AES256-SHA384,DHE-DSS-AES256-GCM-SHA384,DHE-DSS-AES256-SHA256,AES256-GCM-SHA384,AES256-SHA256,ECDHE-ECDSA-AES128-GCM-SHA256,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES128-SHA256,ECDHE-RSA-AES128-SHA256,ECDH-ECDSA-AES128-GCM-SHA256,ECDH-RSA-AES128-GCM-SHA256,ECDH-ECDSA-AES128-SHA256,ECDH-RSA-AES128-SHA256,DHE-DSS-AES128-GCM-SHA256,DHE-DSS-AES128-SHA256,AES128-GCM-SHA256,AES128-SHA256,ECDHE-ECDSA-AES256-SHA,ECDHE-RSA-AES256-SHA,DHE-DSS-AES256-SHA,ECDH-ECDSA-AES256-SHA,ECDH-RSA-AES256-SHA,AES256-SHA,ECDHE-ECDSA-AES128-SHA,ECDHE-RSA-AES128-SHA,DHE-DSS-AES128-SHA,ECDH-ECDSA-AES128-SHA,ECDH-RSA-AES128-SHA,AES128-SHA
    dashboard.listener.https.honor_cipher_order = on
    dashboard.listener.https.secure_renegotiate = on
    dashboard.listener.https.reuse_sessions = on
    dashboard.listener.https.acceptors = 8
    dashboard.listener.https.max_clients = 128

    # dashboard.default_user.login = mqtt-cloud
    # dashboard.default_user.password = mqtt-cloud


  # prometheus agent for pushing metrics to prometheus-push-gateway
  # https://github.com/emqx/emqx/blob/v{{kubethings.aiot.cloud.emqx.app.version}}/apps/emqx_prometheus/etc/emqx_prometheus.conf
  # https://www.emqx.io/docs/zh/v4.4/configuration/configuration.html#插件-emqx-prometheus
  # metric: https://www.emqx.io/docs/zh/v4.4/advanced/metrics-and-stats.html
  # topic metric: https://www.emqx.io/docs/zh/v4.4/advanced/topic-metrics.html
  # alert: https://www.emqx.io/docs/zh/v4.4/advanced/alarms.html
  # grafana: https://github.com/emqx/emqx/blob/v{{kubethings.aiot.cloud.emqx.app.version}}/apps/emqx_prometheus/grafana_template/
  prometheus.conf: |

    # prometheus.push.gateway.server = https://prom-push-gateway.${POD_NAMESPACE}.svc.cluster.local:9091
    prometheus.interval = 15000


  # note: module configuration is located in emqx.conf
  # https://github.com/emqx/emqx/blob/v{{kubethings.aiot.cloud.emqx.app.version}}/data/loaded_modules.tmpl
  # https://github.com/emqx/emqx/blob/v{{kubethings.aiot.cloud.emqx.app.version}}/deploy/charts/emqx/templates/configmap.loadedModules.yaml
  # https://docs.emqx.com/zh/enterprise/v4.4/modules/modules.html
  loaded-modules: |

    % acl
    { emqx_mod_acl_internal, true }.
    % online and offline notification
    % https://docs.emqx.com/zh/enterprise/v4.4/modules/presence.html
    { emqx_mod_presence, true }.
    % mqtt subscription
    % https://www.emqx.io/docs/zh/v4.4/advanced/proxy-subscriptions.html
    { emqx_mod_subscription, true }.
    % topic rewrite
    % https://www.emqx.io/docs/zh/v4.4/advanced/topic-rewrite.html
    { emqx_mod_rewrite, true }.
    % delayed publish
    % https://www.emqx.io/docs/zh/v4.4/advanced/delay-publish.html
    { emqx_mod_delayed, false }.
    % topic metric
    { emqx_mod_topic_metrics, true }.
    % slow subscriptions statistics
    % https://docs.emqx.com/zh/enterprise/v4.4/modules/slow_subscribers_statistics.html
    { emqx_mod_slow_subs, true }.
    % trace
    % https://docs.emqx.com/zh/enterprise/v4.4/modules/tracer.html
    { emqx_mod_trace, true }.

  # https://github.com/emqx/emqx/blob/v{{kubethings.aiot.cloud.emqx.app.version}}/data/loaded_plugins.tmpl
  # https://github.com/emqx/emqx/blob/v{{kubethings.aiot.cloud.emqx.app.version}}/deploy/charts/emqx/templates/configmap.loadedPlugins.yaml
  # https://docs.emqx.com/zh/enterprise/v4.4/advanced/plugins.html
  loaded-plugins: |

    % authentication and authorization
    { emqx_auth_mnesia, true }.
    { emqx_auth_jwt, true }.
    { emqx_auth_pgsql, false }.
    { emqx_auth_mysql, false }.
    { emqx_auth_mongo, false }.
    { emqx_auth_redis, false }.
    { emqx_auth_ldap, false }.
    { emqx_auth_http, false }.

    % retain message
    { emqx_retainer, true }.
    % message bridge
    { emqx_bridge_mqtt, false }.
    % message persistence
    % https://docs.emqx.com/zh/enterprise/v4.4/backend/backend_pgsql.html
    % webhook
    { emqx_web_hook, false }.
    % rule engine based sql
    % https://www.emqx.io/docs/zh/v4.4/rule/bridge_mqtt.html
    % https://docs.emqx.com/zh/enterprise/v4.4/rule/backend_tdengine.html
    % https://docs.emqx.com/zh/enterprise/v4.4/rule/backend_pgsql.html
    % https://docs.emqx.com/zh/enterprise/v4.4/rule/offline_msg_to_pgsql.html
    { emqx_rule_engine, true }.

    % api
    { emqx_management, true }.
    % dashboard
    { emqx_dashboard, true }.

    % prometheus agent for pushing metrics to prometheus-push-gateway
    { emqx_prometheus, false }.
    % https://www.emqx.io/docs/zh/v4.4/advanced/telemetry.html
    { emqx_telemetry, false }.

    % performance debugging
    % https://docs.emqx.com/zh/enterprise/v4.4/modules/recon.html
    { emqx_recon, false }.
