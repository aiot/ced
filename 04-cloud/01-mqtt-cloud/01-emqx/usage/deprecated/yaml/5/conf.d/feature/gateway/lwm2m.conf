gateway.lwm2m {
  ## @doc The Directory for LwM2M Resource definition
  ## @path gateway.lwm2m.xml_dir
  ## @type binary()
  ## @default "etc/lwm2m_xml"
  xml_dir = "etc/lwm2m_xml"

  ## @doc Minimum value of lifetime allowed to be set by the LwM2M client
  ## @path gateway.lwm2m.lifetime_min
  ## @type emqx_gateway_schema:duration()
  ## @default 15s
  lifetime_min = 15s

  ## @doc Maximum value of lifetime allowed to be set by the LwM2M client
  ## @path gateway.lwm2m.lifetime_max
  ## @type emqx_gateway_schema:duration()
  ## @default 86400s
  lifetime_max = 86400s

  ## @doc The value of the time window during which the network link is considered valid by the LwM2M Gateway in QMode mode.
  ## For example, after receiving an update message from a client, any messages within this time window are sent directly to the LwM2M client, and all messages beyond this time window are temporarily stored in memory.
  ## @path gateway.lwm2m.qmode_time_window
  ## @type emqx_gateway_schema:duration_s()
  ## @default 22s
  qmode_time_window = 22s

  ## @doc Automatically observe the object list of REGISTER packet
  ## @path gateway.lwm2m.auto_observe
  ## @type boolean()
  ## @default false
  auto_observe = false

  ## @doc Policy for publishing UPDATE event message.
  ##   - always: send update events as long as the UPDATE request is received.
  ##   - contains_object_list: send update events only if the UPDATE request carries any Object List
  ## @path gateway.lwm2m.update_msg_publish_condition
  ## @type enum: always | contains_object_list
  ## @default contains_object_list
  update_msg_publish_condition = contains_object_list

  ## @path gateway.lwm2m.translators
  translators {
    ## @path gateway.lwm2m.translators.command
    command {
      ## @doc Topic Name
      ## @path gateway.lwm2m.translators.command.topic
      ## @type binary()
      #  topic  =

      ## @doc QoS Level
      ## @path gateway.lwm2m.translators.command.qos
      ## @type qos()
      ## @default 0
      qos = 0
      }

    ## @path gateway.lwm2m.translators.response
    ## @link gateway.lwm2m.translators.command
    response {
      ## @doc Topic Name
      ## @path gateway.lwm2m.translators.response.topic
      ## @type binary()
      #  topic  =

      ## @doc QoS Level
      ## @path gateway.lwm2m.translators.response.qos
      ## @type qos()
      ## @default 0
      qos = 0
      }

    ## @path gateway.lwm2m.translators.notify
    ## @link gateway.lwm2m.translators.command
    notify {
      ## @doc Topic Name
      ## @path gateway.lwm2m.translators.notify.topic
      ## @type binary()
      #  topic  =

      ## @doc QoS Level
      ## @path gateway.lwm2m.translators.notify.qos
      ## @type qos()
      ## @default 0
      qos = 0
      }

    ## @path gateway.lwm2m.translators.register
    ## @link gateway.lwm2m.translators.command
    register {
      ## @doc Topic Name
      ## @path gateway.lwm2m.translators.register.topic
      ## @type binary()
      #  topic  =

      ## @doc QoS Level
      ## @path gateway.lwm2m.translators.register.qos
      ## @type qos()
      ## @default 0
      qos = 0
      }

    ## @path gateway.lwm2m.translators.update
    ## @link gateway.lwm2m.translators.command
    update {
      ## @doc Topic Name
      ## @path gateway.lwm2m.translators.update.topic
      ## @type binary()
      #  topic  =

      ## @doc QoS Level
      ## @path gateway.lwm2m.translators.update.qos
      ## @type qos()
      ## @default 0
      qos = 0
      }
    }

  ## @doc
  ## @path gateway.lwm2m.mountpoint
  ## @type binary()
  ## @default "lwm2m/${endpoint_name}/"
  mountpoint = "lwm2m/${endpoint_name}/"

  ## @path gateway.lwm2m.listeners
  ## @link gateway.mqttsn.listeners
  listeners {
    ## @doc
    ## @path gateway.lwm2m.listeners.udp
    ## @type map_struct()
    ## @link gateway.mqttsn.listeners.udp.$name


    ## @doc
    ## @path gateway.lwm2m.listeners.dtls
    ## @type map_struct()
    ## @link gateway.mqttsn.listeners.dtls.$name

    }

  ## @doc Whether to enable this gateway
  ## @path gateway.lwm2m.enable
  ## @type boolean()
  ## @default true
  enable = true

  ## @doc Whether to enable client process statistic
  ## @path gateway.lwm2m.enable_stats
  ## @type boolean()
  ## @default true
  enable_stats = true

  ## @doc The idle time of the client connection process. It has two purposes:
  ##   1. A newly created client process that does not receive any client requests after that time will be closed directly.
  ##   2. A running client process that does not receive any client requests after this time will go into hibernation to save resources.
  ## @path gateway.lwm2m.idle_timeout
  ## @type emqx_gateway_schema:duration()
  ## @default 30s
  idle_timeout = 30s

  ## @path gateway.lwm2m.clientinfo_override
  ## @link gateway.stomp.clientinfo_override
  clientinfo_override {
    ## @doc Template for overriding username.
    ## @path gateway.lwm2m.clientinfo_override.username
    ## @type binary()
    #  username  =

    ## @doc Template for overriding password.
    ## @path gateway.lwm2m.clientinfo_override.password
    ## @type binary()
    #  password  =

    ## @doc Template for overriding clientid.
    ## @path gateway.lwm2m.clientinfo_override.clientid
    ## @type binary()
    #  clientid  =
    }

  ## @doc Default authentication configs for all the gateway listeners. For per-listener overrides see <code>authentication</code>
  ##  in listener configs
  ## @path gateway.lwm2m.authentication
  ## @type union() authn-builtin_db:authentication | authn-mysql:authentication | authn-postgresql:authentication | authn-mongodb:standalone | authn-mongodb:replica-set | authn-mongodb:sharded-cluster | authn-redis:standalone | authn-redis:cluster | authn-redis:sentinel | authn-http:get | authn-http:post | authn-jwt:hmac-based | authn-jwt:public-key | authn-jwt:jwks | authn-scram-builtin_db:authentication
  ## @link gateway.stomp.listeners.tcp.$name.authentication
  #  authentication  =
}
