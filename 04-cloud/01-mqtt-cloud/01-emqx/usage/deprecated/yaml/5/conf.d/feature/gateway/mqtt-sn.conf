gateway.mqttsn {
  ## @doc MQTT-SN Gateway ID.
  ## When the <code>broadcast</code> option is enabled, the gateway will broadcast ADVERTISE message with this value
  ## @path gateway.mqttsn.gateway_id
  ## @type integer()
  ## @default 1
  gateway_id = 1

  ## @doc Whether to periodically broadcast ADVERTISE messages
  ## @path gateway.mqttsn.broadcast
  ## @type boolean()
  ## @default false
  broadcast = false

  ## @doc Allows connectionless clients to publish messages with a Qos of -1.
  ## This feature is defined for very simple client implementations which do not support any other features except this one. There is no connection setup nor tear down, no registration nor subscription. The client just sends its 'PUBLISH' messages to a GW
  ## @path gateway.mqttsn.enable_qos3
  ## @type boolean()
  ## @default true
  enable_qos3 = true

  ## @doc Whether to initiate all subscribed topic name registration messages to the client after the Session has been taken over by a new channel
  ## @path gateway.mqttsn.subs_resume
  ## @type boolean()
  ## @default false
  subs_resume = false

  ## @doc The pre-defined topic IDs and topic names.
  ## A 'pre-defined' topic ID is a topic ID whose mapping to a topic name is known in advance by both the client's application and the gateway
  ## @path gateway.mqttsn.predefined
  ## @type array()
  ## @default []
  predefined = []

  ## @doc
  ## @path gateway.mqttsn.mountpoint
  ## @type binary()
  ## @default ""
  mountpoint = ""

  ## @path gateway.mqttsn.listeners
  listeners {
    ## @doc
    ## @path gateway.mqttsn.listeners.udp
    ## @type map_struct()
      #  udp.name  =
      ## @path gateway.mqttsn.listeners.udp.$name
      #   {
        ## @path gateway.mqttsn.listeners.udp.$name.udp_options
        #  udp_options {
          ## @doc Specify the {active, N} option for the socket.
          ## See: https://erlang.org/doc/man/inet.html#setopts-2
          ## @path gateway.mqttsn.listeners.udp.$name.udp_options.active_n
          ## @type integer()
          ## @default 100
          #  active_n = 100

          ## @doc Size of the kernel-space receive buffer for the socket.
          ## @path gateway.mqttsn.listeners.udp.$name.udp_options.recbuf
          ## @type emqx_gateway_schema:bytesize()
          #  recbuf  =

          ## @doc Size of the kernel-space send buffer for the socket.
          ## @path gateway.mqttsn.listeners.udp.$name.udp_options.sndbuf
          ## @type emqx_gateway_schema:bytesize()
          #  sndbuf  =

          ## @doc Size of the user-space buffer for the socket.
          ## @path gateway.mqttsn.listeners.udp.$name.udp_options.buffer
          ## @type emqx_gateway_schema:bytesize()
          #  buffer  =

          ## @doc Allow local reuse of port numbers.
          ## @path gateway.mqttsn.listeners.udp.$name.udp_options.reuseaddr
          ## @type boolean()
          ## @default true
          #  reuseaddr = true
        #   }

        ## @doc Enable the listener.
        ## @path gateway.mqttsn.listeners.udp.$name.enable
        ## @type boolean()
        ## @default true
        #  enable = true

        ## @doc The IP address and port that the listener will bind.
        ## @path gateway.mqttsn.listeners.udp.$name.bind
        ## @type union() emqx_gateway_schema:ip_port() | integer()
        #  bind  =

        ## @doc Maximum number of concurrent connections.
        ## @path gateway.mqttsn.listeners.udp.$name.max_connections
        ## @type integer()
        ## @default 1024
        #  max_connections = 1024

        ## @doc Maximum connections per second.
        ## @path gateway.mqttsn.listeners.udp.$name.max_conn_rate
        ## @type integer()
        ## @default 1000
        #  max_conn_rate = 1000

        ## @doc Default authentication configs for all the gateway listeners. For per-listener overrides see <code>authentication</code>
        ##  in listener configs
        ## @path gateway.mqttsn.listeners.udp.$name.authentication
        ## @type union() authn-builtin_db:authentication | authn-mysql:authentication | authn-postgresql:authentication | authn-mongodb:standalone | authn-mongodb:replica-set | authn-mongodb:sharded-cluster | authn-redis:standalone | authn-redis:cluster | authn-redis:sentinel | authn-http:get | authn-http:post | authn-jwt:hmac-based | authn-jwt:public-key | authn-jwt:jwks | authn-scram-builtin_db:authentication
        ## @link gateway.stomp.listeners.tcp.$name.authentication
        #  authentication  =

        ## @doc Set <code>true</code> (default) to enable client authentication on this listener.
        ## When set to <code>false</code> clients will be allowed to connect without authentication.
        ## @path gateway.mqttsn.listeners.udp.$name.enable_authn
        ## @type boolean()
        ## @default true
        #  enable_authn = true

        ## @doc When publishing or subscribing, prefix all topics with a mountpoint string.
        ## The prefixed string will be removed from the topic name when the message is delivered to the subscriber. The mountpoint is a way that users can use to implement isolation of message routing between different listeners.
        ## For example if a client A subscribes to `t` with `listeners.tcp.<name>.mountpoint` set to `some_tenant`, then the client actually subscribes to the topic `some_tenant/t`. Similarly, if another client B (connected to the same listener as the client A) sends a message to topic `t`, the message is routed to all the clients subscribed `some_tenant/t`, so client A will receive the message, with topic name `t`. Set to `""` to disable the feature.
        ## Variables in mountpoint string:
        ##   - <code>${clientid}</code>: clientid
        ##   - <code>${username}</code>: username
        ## @path gateway.mqttsn.listeners.udp.$name.mountpoint
        ## @type binary()
        #  mountpoint  =

        ## @doc The access control rules for this listener.
        ## See: https://github.com/emqtt/esockd#allowdeny
        ## @path gateway.mqttsn.listeners.udp.$name.access_rules
        ## @type array()
        ## @default []
        #  access_rules = []
      #   }


    ## @doc
    ## @path gateway.mqttsn.listeners.dtls
    ## @type map_struct()
      #  dtls.name  =
      ## @path gateway.mqttsn.listeners.dtls.$name
      #   {
        ## @doc Size of the acceptor pool.
        ## @path gateway.mqttsn.listeners.dtls.$name.acceptors
        ## @type integer()
        ## @default 16
        #  acceptors = 16

        ## @path gateway.mqttsn.listeners.dtls.$name.udp_options
        ## @link gateway.mqttsn.listeners.udp.$name.udp_options
        #  udp_options {
          ## @doc Specify the {active, N} option for the socket.
          ## See: https://erlang.org/doc/man/inet.html#setopts-2
          ## @path gateway.mqttsn.listeners.dtls.$name.udp_options.active_n
          ## @type integer()
          ## @default 100
          #  active_n = 100

          ## @doc Size of the kernel-space receive buffer for the socket.
          ## @path gateway.mqttsn.listeners.dtls.$name.udp_options.recbuf
          ## @type emqx_gateway_schema:bytesize()
          #  recbuf  =

          ## @doc Size of the kernel-space send buffer for the socket.
          ## @path gateway.mqttsn.listeners.dtls.$name.udp_options.sndbuf
          ## @type emqx_gateway_schema:bytesize()
          #  sndbuf  =

          ## @doc Size of the user-space buffer for the socket.
          ## @path gateway.mqttsn.listeners.dtls.$name.udp_options.buffer
          ## @type emqx_gateway_schema:bytesize()
          #  buffer  =

          ## @doc Allow local reuse of port numbers.
          ## @path gateway.mqttsn.listeners.dtls.$name.udp_options.reuseaddr
          ## @type boolean()
          ## @default true
          #  reuseaddr = true
        #   }

        ## @doc Enable the listener.
        ## @path gateway.mqttsn.listeners.dtls.$name.enable
        ## @type boolean()
        ## @default true
        #  enable = true

        ## @doc The IP address and port that the listener will bind.
        ## @path gateway.mqttsn.listeners.dtls.$name.bind
        ## @type union() emqx_gateway_schema:ip_port() | integer()
        #  bind  =

        ## @doc Maximum number of concurrent connections.
        ## @path gateway.mqttsn.listeners.dtls.$name.max_connections
        ## @type integer()
        ## @default 1024
        #  max_connections = 1024

        ## @doc Maximum connections per second.
        ## @path gateway.mqttsn.listeners.dtls.$name.max_conn_rate
        ## @type integer()
        ## @default 1000
        #  max_conn_rate = 1000

        ## @doc Default authentication configs for all the gateway listeners. For per-listener overrides see <code>authentication</code>
        ##  in listener configs
        ## @path gateway.mqttsn.listeners.dtls.$name.authentication
        ## @type union() authn-builtin_db:authentication | authn-mysql:authentication | authn-postgresql:authentication | authn-mongodb:standalone | authn-mongodb:replica-set | authn-mongodb:sharded-cluster | authn-redis:standalone | authn-redis:cluster | authn-redis:sentinel | authn-http:get | authn-http:post | authn-jwt:hmac-based | authn-jwt:public-key | authn-jwt:jwks | authn-scram-builtin_db:authentication
        ## @link gateway.stomp.listeners.tcp.$name.authentication
        #  authentication  =

        ## @doc Set <code>true</code> (default) to enable client authentication on this listener.
        ## When set to <code>false</code> clients will be allowed to connect without authentication.
        ## @path gateway.mqttsn.listeners.dtls.$name.enable_authn
        ## @type boolean()
        ## @default true
        #  enable_authn = true

        ## @doc When publishing or subscribing, prefix all topics with a mountpoint string.
        ## The prefixed string will be removed from the topic name when the message is delivered to the subscriber. The mountpoint is a way that users can use to implement isolation of message routing between different listeners.
        ## For example if a client A subscribes to `t` with `listeners.tcp.<name>.mountpoint` set to `some_tenant`, then the client actually subscribes to the topic `some_tenant/t`. Similarly, if another client B (connected to the same listener as the client A) sends a message to topic `t`, the message is routed to all the clients subscribed `some_tenant/t`, so client A will receive the message, with topic name `t`. Set to `""` to disable the feature.
        ## Variables in mountpoint string:
        ##   - <code>${clientid}</code>: clientid
        ##   - <code>${username}</code>: username
        ## @path gateway.mqttsn.listeners.dtls.$name.mountpoint
        ## @type binary()
        #  mountpoint  =

        ## @doc The access control rules for this listener.
        ## See: https://github.com/emqtt/esockd#allowdeny
        ## @path gateway.mqttsn.listeners.dtls.$name.access_rules
        ## @type array()
        ## @default []
        #  access_rules = []

        ## @path gateway.mqttsn.listeners.dtls.$name.dtls_options
        #  dtls_options {
          ## @doc Trusted PEM format CA certificates bundle file.</br>
          ## The certificates in this file are used to verify the TLS peer's certificates.
          ## Append new certificates to the file if new CAs are to be trusted.
          ## There is no need to restart EMQX to have the updated file loaded, because
          ## the system regularly checks if file has been updated (and reload).</br>
          ## NOTE: invalidating (deleting) a certificate from the file will not affect
          ## already established connections.
          ## @path gateway.mqttsn.listeners.dtls.$name.dtls_options.cacertfile
          ## @type binary()
          #  cacertfile  =

          ## @doc PEM format certificates chain file.</br>
          ## The certificates in this file should be in reversed order of the certificate
          ## issue chain. That is, the host's certificate should be placed in the beginning
          ## of the file, followed by the immediate issuer certificate and so on.
          ## Although the root CA certificate is optional, it should be placed at the end of
          ## the file if it is to be added.
          ## @path gateway.mqttsn.listeners.dtls.$name.dtls_options.certfile
          ## @type binary()
          #  certfile  =

          ## @doc PEM format private key file.
          ## @path gateway.mqttsn.listeners.dtls.$name.dtls_options.keyfile
          ## @type binary()
          #  keyfile  =

          ## @doc Enable or disable peer verification.
          ## @path gateway.mqttsn.listeners.dtls.$name.dtls_options.verify
          ## @type enum: verify_peer | verify_none
          ## @default verify_none
          #  verify = verify_none

          ## @doc Enable TLS session reuse.
          ## @path gateway.mqttsn.listeners.dtls.$name.dtls_options.reuse_sessions
          ## @type boolean()
          ## @default true
          #  reuse_sessions = true

          ## @doc Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path. So, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly; if 1 the path can be PEER, CA, ROOT-CA; if 2 the path can be PEER, CA, CA, ROOT-CA, and so on. The default value is 10.
          ## @path gateway.mqttsn.listeners.dtls.$name.dtls_options.depth
          ## @type integer()
          ## @default 10
          #  depth = 10

          ## @doc String containing the user's password.
          ## Only used if the private key file is password-protected.
          ## @path gateway.mqttsn.listeners.dtls.$name.dtls_options.password
          ## @type string()
          #  password = ""

          ## @doc All TLS/DTLS versions to be supported.</br>
          ## NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.</br>
          ## In case PSK cipher suites are intended, make sure to configured
          ## <code>['tlsv1.2', 'tlsv1.1']</code> here.
          ## @path gateway.mqttsn.listeners.dtls.$name.dtls_options.versions
          ## @type array()
          ## @default [dtlsv1.2, dtlsv1]
          #  versions = [dtlsv1.2, dtlsv1]

          ## @doc This config holds TLS cipher suite names separated by comma,
          ## or as an array of strings. e.g.
          ## <code>"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256"</code> or
          ## <code>["TLS_AES_256_GCM_SHA384","TLS_AES_128_GCM_SHA256"]</code>.
          ## </br>
          ## Ciphers (and their ordering) define the way in which the
          ## client and server encrypts information over the network connection.
          ## Selecting a good cipher suite is critical for the
          ## application's data security, confidentiality and performance.
          ##
          ## The names should be in OpenSSL string format (not RFC format).
          ## All default values and examples provided by EMQX config
          ## documentation are all in OpenSSL format.</br>
          ##
          ## NOTE: Certain cipher suites are only compatible with
          ## specific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')
          ## incompatible cipher suites will be silently dropped.
          ## For instance, if only 'tlsv1.3' is given in the <code>versions</code>,
          ## configuring cipher suites for other versions will have no effect.
          ## </br>
          ##
          ## NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config</br>
          ## If PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.</br>
          ## PSK cipher suites: <code>"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,
          ## RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,
          ## RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,
          ## RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA"</code></br>
          ## @path gateway.mqttsn.listeners.dtls.$name.dtls_options.ciphers
          ## @type array()
          ## @default ["ECDHE-ECDSA-AES256-GCM-SHA384", "ECDHE-RSA-AES256-GCM-SHA384", "ECDHE-ECDSA-AES256-SHA384", "ECDHE-RSA-AES256-SHA384", "ECDH-ECDSA-AES256-GCM-SHA384", "ECDH-RSA-AES256-GCM-SHA384", "ECDH-ECDSA-AES256-SHA384", "ECDH-RSA-AES256-SHA384", "DHE-DSS-AES256-GCM-SHA384", "DHE-DSS-AES256-SHA256", "AES256-GCM-SHA384", "AES256-SHA256", "ECDHE-ECDSA-AES128-GCM-SHA256", "ECDHE-RSA-AES128-GCM-SHA256", "ECDHE-ECDSA-AES128-SHA256", "ECDHE-RSA-AES128-SHA256", "ECDH-ECDSA-AES128-GCM-SHA256", "ECDH-RSA-AES128-GCM-SHA256", "ECDH-ECDSA-AES128-SHA256", "ECDH-RSA-AES128-SHA256", "DHE-DSS-AES128-GCM-SHA256", "DHE-DSS-AES128-SHA256", "AES128-GCM-SHA256", "AES128-SHA256", "ECDHE-ECDSA-AES256-SHA", "ECDHE-RSA-AES256-SHA", "DHE-DSS-AES256-SHA", "ECDH-ECDSA-AES256-SHA", "ECDH-RSA-AES256-SHA", "ECDHE-ECDSA-AES128-SHA", "ECDHE-RSA-AES128-SHA", "DHE-DSS-AES128-SHA", "ECDH-ECDSA-AES128-SHA", "ECDH-RSA-AES128-SHA", "RSA-PSK-AES256-GCM-SHA384", "RSA-PSK-AES256-CBC-SHA384", "RSA-PSK-AES128-GCM-SHA256", "RSA-PSK-AES128-CBC-SHA256", "RSA-PSK-AES256-CBC-SHA", "RSA-PSK-AES128-CBC-SHA"]
          #  ciphers = ["ECDHE-ECDSA-AES256-GCM-SHA384", "ECDHE-RSA-AES256-GCM-SHA384", "ECDHE-ECDSA-AES256-SHA384", "ECDHE-RSA-AES256-SHA384", "ECDH-ECDSA-AES256-GCM-SHA384", "ECDH-RSA-AES256-GCM-SHA384", "ECDH-ECDSA-AES256-SHA384", "ECDH-RSA-AES256-SHA384", "DHE-DSS-AES256-GCM-SHA384", "DHE-DSS-AES256-SHA256", "AES256-GCM-SHA384", "AES256-SHA256", "ECDHE-ECDSA-AES128-GCM-SHA256", "ECDHE-RSA-AES128-GCM-SHA256", "ECDHE-ECDSA-AES128-SHA256", "ECDHE-RSA-AES128-SHA256", "ECDH-ECDSA-AES128-GCM-SHA256", "ECDH-RSA-AES128-GCM-SHA256", "ECDH-ECDSA-AES128-SHA256", "ECDH-RSA-AES128-SHA256", "DHE-DSS-AES128-GCM-SHA256", "DHE-DSS-AES128-SHA256", "AES128-GCM-SHA256", "AES128-SHA256", "ECDHE-ECDSA-AES256-SHA", "ECDHE-RSA-AES256-SHA", "DHE-DSS-AES256-SHA", "ECDH-ECDSA-AES256-SHA", "ECDH-RSA-AES256-SHA", "ECDHE-ECDSA-AES128-SHA", "ECDHE-RSA-AES128-SHA", "DHE-DSS-AES128-SHA", "ECDH-ECDSA-AES128-SHA", "ECDH-RSA-AES128-SHA", "RSA-PSK-AES256-GCM-SHA384", "RSA-PSK-AES256-CBC-SHA384", "RSA-PSK-AES128-GCM-SHA256", "RSA-PSK-AES128-CBC-SHA256", "RSA-PSK-AES256-CBC-SHA", "RSA-PSK-AES128-CBC-SHA"]

          ## @doc EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.
          ## @path gateway.mqttsn.listeners.dtls.$name.dtls_options.user_lookup_fun
          ## @type string()
          ## @default "emqx_tls_psk:lookup"
          #  user_lookup_fun = "emqx_tls_psk:lookup"

          ## @doc SSL parameter renegotiation is a feature that allows a client and a server
          ## to renegotiate the parameters of the SSL connection on the fly.
          ## RFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,
          ## you drop support for the insecure renegotiation, prone to MitM attacks.
          ## @path gateway.mqttsn.listeners.dtls.$name.dtls_options.secure_renegotiate
          ## @type boolean()
          ## @default true
          #  secure_renegotiate = true

          ## @doc Path to a file containing PEM-encoded Diffie-Hellman parameters
          ## to be used by the server if a cipher suite using Diffie-Hellman
          ## key exchange is negotiated. If not specified, default parameters
          ## are used.</br>
          ## NOTE: The <code>dhfile</code> option is not supported by TLS 1.3.
          ## @path gateway.mqttsn.listeners.dtls.$name.dtls_options.dhfile
          ## @type string()
          #  dhfile  =

          ## @doc Used together with {verify, verify_peer} by an TLS/DTLS server.
          ## If set to true, the server fails if the client does not have a
          ## certificate to send, that is, sends an empty certificate.
          ## If set to false, it fails only if the client sends an invalid
          ## certificate (an empty certificate is considered valid).
          ## @path gateway.mqttsn.listeners.dtls.$name.dtls_options.fail_if_no_peer_cert
          ## @type boolean()
          ## @default false
          #  fail_if_no_peer_cert = false

          ## @doc An important security setting, it forces the cipher to be set based
          ##  on the server-specified order instead of the client-specified order,
          ##  hence enforcing the (usually more properly configured) security
          ##  ordering of the server administrator.
          ## @path gateway.mqttsn.listeners.dtls.$name.dtls_options.honor_cipher_order
          ## @type boolean()
          ## @default true
          #  honor_cipher_order = true

          ## @doc In protocols that support client-initiated renegotiation,
          ## the cost of resources of such an operation is higher for the server than the client.
          ## This can act as a vector for denial of service attacks.
          ## The SSL application already takes measures to counter-act such attempts,
          ## but client-initiated renegotiation can be strictly disabled by setting this option to false.
          ## The default value is true. Note that disabling renegotiation can result in
          ## long-lived connections becoming unusable due to limits on
          ## the number of messages the underlying cipher suite can encipher.
          ## @path gateway.mqttsn.listeners.dtls.$name.dtls_options.client_renegotiation
          ## @type boolean()
          ## @default true
          #  client_renegotiation = true
        #   }
      #   }

    }

  ## @doc Whether to enable this gateway
  ## @path gateway.mqttsn.enable
  ## @type boolean()
  ## @default true
  enable = true

  ## @doc Whether to enable client process statistic
  ## @path gateway.mqttsn.enable_stats
  ## @type boolean()
  ## @default true
  enable_stats = true

  ## @doc The idle time of the client connection process. It has two purposes:
  ##   1. A newly created client process that does not receive any client requests after that time will be closed directly.
  ##   2. A running client process that does not receive any client requests after this time will go into hibernation to save resources.
  ## @path gateway.mqttsn.idle_timeout
  ## @type emqx_gateway_schema:duration()
  ## @default 30s
  idle_timeout = 30s

  ## @path gateway.mqttsn.clientinfo_override
  ## @link gateway.stomp.clientinfo_override
  clientinfo_override {
    ## @doc Template for overriding username.
    ## @path gateway.mqttsn.clientinfo_override.username
    ## @type binary()
    #  username  =

    ## @doc Template for overriding password.
    ## @path gateway.mqttsn.clientinfo_override.password
    ## @type binary()
    #  password  =

    ## @doc Template for overriding clientid.
    ## @path gateway.mqttsn.clientinfo_override.clientid
    ## @type binary()
    #  clientid  =
    }

  ## @doc Default authentication configs for all the gateway listeners. For per-listener overrides see <code>authentication</code>
  ##  in listener configs
  ## @path gateway.mqttsn.authentication
  ## @type union() authn-builtin_db:authentication | authn-mysql:authentication | authn-postgresql:authentication | authn-mongodb:standalone | authn-mongodb:replica-set | authn-mongodb:sharded-cluster | authn-redis:standalone | authn-redis:cluster | authn-redis:sentinel | authn-http:get | authn-http:post | authn-jwt:hmac-based | authn-jwt:public-key | authn-jwt:jwks | authn-scram-builtin_db:authentication
  ## @link gateway.stomp.listeners.tcp.$name.authentication
  #  authentication  =
}
