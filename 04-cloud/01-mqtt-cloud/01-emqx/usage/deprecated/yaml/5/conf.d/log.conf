log {
  console_handler {
    enable = true

    formatter = text
    single_line = true
    chars_limit = unlimited
    max_depth = unlimited
    level = info

    ## @doc The time offset to be used when formatting the timestamp.
    ## Can be one of:
    ##   - <code>system</code>: the time offset used by the local system
    ##   - <code>utc</code>: the UTC time offset
    ##   - <code>+-[hh]:[mm]</code>: user specified time offset, such as "-02:00" or "+00:00"
    ## Defaults to: <code>system</code>.
    ## @path log.console_handler.time_offset
    ## @type string()
    ## @default system
    time_offset = system

    ## @doc As long as the number of buffered log events is lower than this value,
    ## all log events are handled asynchronously. This means that the client process sending the log event,
    ## by calling a log function in the Logger API, does not wait for a response from the handler
    ## but continues executing immediately after the event is sent.
    ## It is not affected by the time it takes the handler to print the event to the log device.
    ## If the message queue grows larger than this value,
    ## the handler starts handling log events synchronously instead,
    ## meaning that the client process sending the event must wait for a response.
    ## When the handler reduces the message queue to a level below the sync_mode_qlen threshold,
    ## asynchronous operation is resumed.
    ## @path log.console_handler.sync_mode_qlen
    ## @type non_neg_integer()
    ## @default 100
    sync_mode_qlen = 100

    ## @doc When the number of buffered log events is larger than this value, the new log events are dropped.
    ## When drop mode is activated or deactivated, a message is printed in the logs.
    ## @path log.console_handler.drop_mode_qlen
    ## @type pos_integer()
    ## @default 3000
    drop_mode_qlen = 3000

    ## @doc If the number of buffered log events grows larger than this threshold, a flush (delete) operation takes place.
    ## To flush events, the handler discards the buffered log messages without logging.
    ## @path log.console_handler.flush_qlen
    ## @type pos_integer()
    ## @default 8000
    flush_qlen = 8000

    ## @path log.console_handler.overload_kill
    overload_kill {
      ## @doc Enable log handler overload kill feature.
      ## @path log.console_handler.overload_kill.enable
      ## @type boolean()
      ## @default true
      enable = true

      ## @doc Maximum memory size that the log handler process is allowed to use.
      ## @path log.console_handler.overload_kill.mem_size
      ## @type emqx_schema:bytesize()
      ## @default 30MB
      mem_size = 30MB

      ## @doc Maximum allowed queue length.
      ## @path log.console_handler.overload_kill.qlen
      ## @type pos_integer()
      ## @default 20000
      qlen = 20000

      ## @doc If the handler is terminated, it restarts automatically after a delay specified in milliseconds. The value `infinity` prevents restarts.
      ## @path log.console_handler.overload_kill.restart_after
      ## @type union() emqx_schema:duration_ms() | infinity
      ## @default 5s
      restart_after = 5s
    }

    ## @path log.console_handler.burst_limit
    burst_limit {
      ## @doc Enable log burst control feature.
      ## @path log.console_handler.burst_limit.enable
      ## @type boolean()
      ## @default true
      enable = true

      ## @doc Maximum number of log events to handle within a `window_time` interval. After the limit is reached, successive events are dropped until the end of the `window_time`.
      ## @path log.console_handler.burst_limit.max_count
      ## @type pos_integer()
      ## @default 10000
      max_count = 10000

      ## @doc See <code>max_count</code>.
      ## @path log.console_handler.burst_limit.window_time
      ## @type emqx_schema:duration()
      ## @default 1s
      window_time = 1s
    }

    ## @doc Type of supervisor reports that are logged. Defaults to <code>error</code>
    ##   - <code>error</code>: only log errors in the Erlang processes.
    ##   - <code>progress</code>: log process startup.
    ## @path log.console_handler.supervisor_reports
    ## @type enum: error | progress
    ## @default error
    supervisor_reports = error
  }

  file_handlers {
    default {
      enable = false

      formatter = text
      single_line = true
      chars_limit = unlimited
      max_depth = unlimited
      level = info

      file = log/emqx.log

      max_size = 50MB
      rotation {
        enable = true

        # @doc Maximum number of log files.
        # @path log.file_handlers.$name.rotation.count
        # @type 1..2048
        # @default 10
        count = 10
      }

      # @doc The time offset to be used when formatting the timestamp.
      # Can be one of:
      #   - <code>system</code>: the time offset used by the local system
      #   - <code>utc</code>: the UTC time offset
      #   - <code>+-[hh]:[mm]</code>: user specified time offset, such as "-02:00" or "+00:00"
      # Defaults to: <code>system</code>.
      # @path log.file_handlers.$name.time_offset
      # @type string()
      # @default system
      time_offset = system

      # @doc As long as the number of buffered log events is lower than this value,
      # all log events are handled asynchronously. This means that the client process sending the log event,
      # by calling a log function in the Logger API, does not wait for a response from the handler
      # but continues executing immediately after the event is sent.
      # It is not affected by the time it takes the handler to print the event to the log device.
      # If the message queue grows larger than this value,
      # the handler starts handling log events synchronously instead,
      # meaning that the client process sending the event must wait for a response.
      # When the handler reduces the message queue to a level below the sync_mode_qlen threshold,
      # asynchronous operation is resumed.
      # @path log.file_handlers.$name.sync_mode_qlen
      # @type non_neg_integer()
      # @default 100
      sync_mode_qlen = 100

      # @doc When the number of buffered log events is larger than this value, the new log events are dropped.
      # When drop mode is activated or deactivated, a message is printed in the logs.
      # @path log.file_handlers.$name.drop_mode_qlen
      # @type pos_integer()
      # @default 3000
      drop_mode_qlen = 3000

      # @doc If the number of buffered log events grows larger than this threshold, a flush (delete) operation takes place.
      # To flush events, the handler discards the buffered log messages without logging.
      # @path log.file_handlers.$name.flush_qlen
      # @type pos_integer()
      # @default 8000
      flush_qlen = 8000

      # @path log.file_handlers.$name.overload_kill
      # @link log.console_handler.overload_kill
      overload_kill {
        # @doc Enable log handler overload kill feature.
        # @path log.file_handlers.$name.overload_kill.enable
        # @type boolean()
        # @default true
        enable = true

        # @doc Maximum memory size that the log handler process is allowed to use.
        # @path log.file_handlers.$name.overload_kill.mem_size
        # @type emqx_schema:bytesize()
        # @default 30MB
        mem_size = 30MB

        # @doc Maximum allowed queue length.
        # @path log.file_handlers.$name.overload_kill.qlen
        # @type pos_integer()
        # @default 20000
        qlen = 20000

        # @doc If the handler is terminated, it restarts automatically after a delay specified in milliseconds. The value `infinity` prevents restarts.
        # @path log.file_handlers.$name.overload_kill.restart_after
        # @type union() emqx_schema:duration_ms() | infinity
        # @default 5s
        restart_after = 5s
      }

      # @path log.file_handlers.$name.burst_limit
      # @link log.console_handler.burst_limit
      burst_limit {
        # @doc Enable log burst control feature.
        # @path log.file_handlers.$name.burst_limit.enable
        # @type boolean()
        # @default true
        enable = true

        # @doc Maximum number of log events to handle within a `window_time` interval. After the limit is reached, successive events are dropped until the end of the `window_time`.
        # @path log.file_handlers.$name.burst_limit.max_count
        # @type pos_integer()
        # @default 10000
        max_count = 10000

        # @doc See <code>max_count</code>.
        # @path log.file_handlers.$name.burst_limit.window_time
        # @type emqx_schema:duration()
        # @default 1s
        window_time = 1s
      }

      # @doc Type of supervisor reports that are logged. Defaults to <code>error</code>
      #   - <code>error</code>: only log errors in the Erlang processes.
      #   - <code>progress</code>: log process startup.
      # @path log.file_handlers.$name.supervisor_reports
      # @type enum: error | progress
      # @default error
      supervisor_reports = error
    }
  }
}

