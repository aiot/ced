gateway.stomp {
  ## @path gateway.stomp.frame
  frame {
    ## @doc The maximum number of Header
    ## @path gateway.stomp.frame.max_headers
    ## @type non_neg_integer()
    ## @default 10
    max_headers = 10

    ## @doc The maximum string length of the Header Value
    ## @path gateway.stomp.frame.max_headers_length
    ## @type non_neg_integer()
    ## @default 1024
    max_headers_length = 1024

    ## @doc Maximum number of bytes of Body allowed per Stomp packet
    ## @path gateway.stomp.frame.max_body_length
    ## @type integer()
    ## @default 65536
    max_body_length = 65536
  }

  ## @doc
  ## @path gateway.stomp.mountpoint
  ## @type binary()
  ## @default ""
  mountpoint = ""

  ## @path gateway.stomp.listeners
  listeners {
    ## @doc
    ## @path gateway.stomp.listeners.tcp
    ## @type map_struct()
      #  tcp.name  =
      ## @path gateway.stomp.listeners.tcp.$name
      #   {
        ## @doc Size of the acceptor pool.
        ## @path gateway.stomp.listeners.tcp.$name.acceptors
        ## @type integer()
        ## @default 16
        #  acceptors = 16

        ## @path gateway.stomp.listeners.tcp.$name.tcp_options
        ## @link listeners.tcp.$name.tcp_options
        #  tcp_options {
          ## @doc Specify the {active, N} option for this Socket.</br>
          ## See: https://erlang.org/doc/man/inet.html#setopts-2
          ## @path gateway.stomp.listeners.tcp.$name.tcp_options.active_n
          ## @type integer()
          ## @default 100
          #  active_n = 100

          ## @doc TCP backlog defines the maximum length that the queue of
          ##  pending connections can grow to.
          ## @path gateway.stomp.listeners.tcp.$name.tcp_options.backlog
          ## @type pos_integer()
          ## @default 1024
          #  backlog = 1024

          ## @doc The TCP send timeout for the connections.
          ## @path gateway.stomp.listeners.tcp.$name.tcp_options.send_timeout
          ## @type emqx_schema:duration()
          ## @default 15s
          #  send_timeout = 15s

          ## @doc Close the connection if send timeout.
          ## @path gateway.stomp.listeners.tcp.$name.tcp_options.send_timeout_close
          ## @type boolean()
          ## @default true
          #  send_timeout_close = true

          ## @doc The TCP receive buffer (OS kernel) for the connections.
          ## @path gateway.stomp.listeners.tcp.$name.tcp_options.recbuf
          ## @type emqx_schema:bytesize()
          #  recbuf = 2KB

          ## @doc The TCP send buffer (OS kernel) for the connections.
          ## @path gateway.stomp.listeners.tcp.$name.tcp_options.sndbuf
          ## @type emqx_schema:bytesize()
          #  sndbuf = 4KB

          ## @doc The size of the user-space buffer used by the driver.
          ## @path gateway.stomp.listeners.tcp.$name.tcp_options.buffer
          ## @type emqx_schema:bytesize()
          ## @default 4KB
          #  buffer = 4KB

          ## @doc The socket is set to a busy state when the amount of data queued internally
          ##   by the VM socket implementation reaches this limit.
          ## @path gateway.stomp.listeners.tcp.$name.tcp_options.high_watermark
          ## @type emqx_schema:bytesize()
          ## @default 1MB
          #  high_watermark = 1MB

          ## @doc The TCP_NODELAY flag for the connections.
          ## @path gateway.stomp.listeners.tcp.$name.tcp_options.nodelay
          ## @type boolean()
          ## @default true
          #  nodelay = true

          ## @doc The SO_REUSEADDR flag for the connections.
          ## @path gateway.stomp.listeners.tcp.$name.tcp_options.reuseaddr
          ## @type boolean()
          ## @default true
          #  reuseaddr = true
        #   }

        ## @doc Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed behind HAProxy or Nginx.
        ## See: https://www.haproxy.com/blog/haproxy/proxy-protocol/
        ## @path gateway.stomp.listeners.tcp.$name.proxy_protocol
        ## @type boolean()
        ## @default false
        #  proxy_protocol = false

        ## @doc Timeout for proxy protocol.
        ## EMQX will close the TCP connection if proxy protocol packet is not received within the timeout.
        ## @path gateway.stomp.listeners.tcp.$name.proxy_protocol_timeout
        ## @type emqx_gateway_schema:duration()
        ## @default 15s
        #  proxy_protocol_timeout = 15s

        ## @doc Enable the listener.
        ## @path gateway.stomp.listeners.tcp.$name.enable
        ## @type boolean()
        ## @default true
        #  enable = true

        ## @doc The IP address and port that the listener will bind.
        ## @path gateway.stomp.listeners.tcp.$name.bind
        ## @type union() emqx_gateway_schema:ip_port() | integer()
        #  bind  =

        ## @doc Maximum number of concurrent connections.
        ## @path gateway.stomp.listeners.tcp.$name.max_connections
        ## @type integer()
        ## @default 1024
        #  max_connections = 1024

        ## @doc Maximum connections per second.
        ## @path gateway.stomp.listeners.tcp.$name.max_conn_rate
        ## @type integer()
        ## @default 1000
        #  max_conn_rate = 1000

        ## @doc Default authentication configs for all the gateway listeners. For per-listener overrides see <code>authentication</code>
        ##  in listener configs
        ## @path gateway.stomp.listeners.tcp.$name.authentication
        ## @type union() authn-builtin_db:authentication | authn-mysql:authentication | authn-postgresql:authentication | authn-mongodb:standalone | authn-mongodb:replica-set | authn-mongodb:sharded-cluster | authn-redis:standalone | authn-redis:cluster | authn-redis:sentinel | authn-http:get | authn-http:post | authn-jwt:hmac-based | authn-jwt:public-key | authn-jwt:jwks | authn-scram-builtin_db:authentication
        #  authentication  =

        ## @doc Set <code>true</code> (default) to enable client authentication on this listener.
        ## When set to <code>false</code> clients will be allowed to connect without authentication.
        ## @path gateway.stomp.listeners.tcp.$name.enable_authn
        ## @type boolean()
        ## @default true
        #  enable_authn = true

        ## @doc When publishing or subscribing, prefix all topics with a mountpoint string.
        ## The prefixed string will be removed from the topic name when the message is delivered to the subscriber. The mountpoint is a way that users can use to implement isolation of message routing between different listeners.
        ## For example if a client A subscribes to `t` with `listeners.tcp.<name>.mountpoint` set to `some_tenant`, then the client actually subscribes to the topic `some_tenant/t`. Similarly, if another client B (connected to the same listener as the client A) sends a message to topic `t`, the message is routed to all the clients subscribed `some_tenant/t`, so client A will receive the message, with topic name `t`. Set to `""` to disable the feature.
        ## Variables in mountpoint string:
        ##   - <code>${clientid}</code>: clientid
        ##   - <code>${username}</code>: username
        ## @path gateway.stomp.listeners.tcp.$name.mountpoint
        ## @type binary()
        #  mountpoint  =

        ## @doc The access control rules for this listener.
        ## See: https://github.com/emqtt/esockd#allowdeny
        ## @path gateway.stomp.listeners.tcp.$name.access_rules
        ## @type array()
        ## @default []
        #  access_rules = []
      #   }


    ## @doc
    ## @path gateway.stomp.listeners.ssl
    ## @type map_struct()
      #  ssl.name  =
      ## @path gateway.stomp.listeners.ssl.$name
      #   {
        ## @doc Size of the acceptor pool.
        ## @path gateway.stomp.listeners.ssl.$name.acceptors
        ## @type integer()
        ## @default 16
        #  acceptors = 16

        ## @path gateway.stomp.listeners.ssl.$name.tcp_options
        ## @link listeners.tcp.$name.tcp_options
        #  tcp_options {
          ## @doc Specify the {active, N} option for this Socket.</br>
          ## See: https://erlang.org/doc/man/inet.html#setopts-2
          ## @path gateway.stomp.listeners.ssl.$name.tcp_options.active_n
          ## @type integer()
          ## @default 100
          #  active_n = 100

          ## @doc TCP backlog defines the maximum length that the queue of
          ##  pending connections can grow to.
          ## @path gateway.stomp.listeners.ssl.$name.tcp_options.backlog
          ## @type pos_integer()
          ## @default 1024
          #  backlog = 1024

          ## @doc The TCP send timeout for the connections.
          ## @path gateway.stomp.listeners.ssl.$name.tcp_options.send_timeout
          ## @type emqx_schema:duration()
          ## @default 15s
          #  send_timeout = 15s

          ## @doc Close the connection if send timeout.
          ## @path gateway.stomp.listeners.ssl.$name.tcp_options.send_timeout_close
          ## @type boolean()
          ## @default true
          #  send_timeout_close = true

          ## @doc The TCP receive buffer (OS kernel) for the connections.
          ## @path gateway.stomp.listeners.ssl.$name.tcp_options.recbuf
          ## @type emqx_schema:bytesize()
          #  recbuf = 2KB

          ## @doc The TCP send buffer (OS kernel) for the connections.
          ## @path gateway.stomp.listeners.ssl.$name.tcp_options.sndbuf
          ## @type emqx_schema:bytesize()
          #  sndbuf = 4KB

          ## @doc The size of the user-space buffer used by the driver.
          ## @path gateway.stomp.listeners.ssl.$name.tcp_options.buffer
          ## @type emqx_schema:bytesize()
          ## @default 4KB
          #  buffer = 4KB

          ## @doc The socket is set to a busy state when the amount of data queued internally
          ##   by the VM socket implementation reaches this limit.
          ## @path gateway.stomp.listeners.ssl.$name.tcp_options.high_watermark
          ## @type emqx_schema:bytesize()
          ## @default 1MB
          #  high_watermark = 1MB

          ## @doc The TCP_NODELAY flag for the connections.
          ## @path gateway.stomp.listeners.ssl.$name.tcp_options.nodelay
          ## @type boolean()
          ## @default true
          #  nodelay = true

          ## @doc The SO_REUSEADDR flag for the connections.
          ## @path gateway.stomp.listeners.ssl.$name.tcp_options.reuseaddr
          ## @type boolean()
          ## @default true
          #  reuseaddr = true
        #   }

        ## @doc Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed behind HAProxy or Nginx.
        ## See: https://www.haproxy.com/blog/haproxy/proxy-protocol/
        ## @path gateway.stomp.listeners.ssl.$name.proxy_protocol
        ## @type boolean()
        ## @default false
        #  proxy_protocol = false

        ## @doc Timeout for proxy protocol.
        ## EMQX will close the TCP connection if proxy protocol packet is not received within the timeout.
        ## @path gateway.stomp.listeners.ssl.$name.proxy_protocol_timeout
        ## @type emqx_gateway_schema:duration()
        ## @default 15s
        #  proxy_protocol_timeout = 15s

        ## @doc Enable the listener.
        ## @path gateway.stomp.listeners.ssl.$name.enable
        ## @type boolean()
        ## @default true
        #  enable = true

        ## @doc The IP address and port that the listener will bind.
        ## @path gateway.stomp.listeners.ssl.$name.bind
        ## @type union() emqx_gateway_schema:ip_port() | integer()
        #  bind  =

        ## @doc Maximum number of concurrent connections.
        ## @path gateway.stomp.listeners.ssl.$name.max_connections
        ## @type integer()
        ## @default 1024
        #  max_connections = 1024

        ## @doc Maximum connections per second.
        ## @path gateway.stomp.listeners.ssl.$name.max_conn_rate
        ## @type integer()
        ## @default 1000
        #  max_conn_rate = 1000

        ## @doc Default authentication configs for all the gateway listeners. For per-listener overrides see <code>authentication</code>
        ##  in listener configs
        ## @path gateway.stomp.listeners.ssl.$name.authentication
        ## @type union() authn-builtin_db:authentication | authn-mysql:authentication | authn-postgresql:authentication | authn-mongodb:standalone | authn-mongodb:replica-set | authn-mongodb:sharded-cluster | authn-redis:standalone | authn-redis:cluster | authn-redis:sentinel | authn-http:get | authn-http:post | authn-jwt:hmac-based | authn-jwt:public-key | authn-jwt:jwks | authn-scram-builtin_db:authentication
        ## @link gateway.stomp.listeners.tcp.$name.authentication
        #  authentication  =

        ## @doc Set <code>true</code> (default) to enable client authentication on this listener.
        ## When set to <code>false</code> clients will be allowed to connect without authentication.
        ## @path gateway.stomp.listeners.ssl.$name.enable_authn
        ## @type boolean()
        ## @default true
        #  enable_authn = true

        ## @doc When publishing or subscribing, prefix all topics with a mountpoint string.
        ## The prefixed string will be removed from the topic name when the message is delivered to the subscriber. The mountpoint is a way that users can use to implement isolation of message routing between different listeners.
        ## For example if a client A subscribes to `t` with `listeners.tcp.<name>.mountpoint` set to `some_tenant`, then the client actually subscribes to the topic `some_tenant/t`. Similarly, if another client B (connected to the same listener as the client A) sends a message to topic `t`, the message is routed to all the clients subscribed `some_tenant/t`, so client A will receive the message, with topic name `t`. Set to `""` to disable the feature.
        ## Variables in mountpoint string:
        ##   - <code>${clientid}</code>: clientid
        ##   - <code>${username}</code>: username
        ## @path gateway.stomp.listeners.ssl.$name.mountpoint
        ## @type binary()
        #  mountpoint  =

        ## @doc The access control rules for this listener.
        ## See: https://github.com/emqtt/esockd#allowdeny
        ## @path gateway.stomp.listeners.ssl.$name.access_rules
        ## @type array()
        ## @default []
        #  access_rules = []

        ## @path gateway.stomp.listeners.ssl.$name.ssl_options
        ## @link listeners.ssl.$name.ssl_options
        #  ssl_options {
          ## @doc Trusted PEM format CA certificates bundle file.</br>
          ## The certificates in this file are used to verify the TLS peer's certificates.
          ## Append new certificates to the file if new CAs are to be trusted.
          ## There is no need to restart EMQX to have the updated file loaded, because
          ## the system regularly checks if file has been updated (and reload).</br>
          ## NOTE: invalidating (deleting) a certificate from the file will not affect
          ## already established connections.
          ## @path gateway.stomp.listeners.ssl.$name.ssl_options.cacertfile
          ## @type binary()
          #  cacertfile  =

          ## @doc PEM format certificates chain file.</br>
          ## The certificates in this file should be in reversed order of the certificate
          ## issue chain. That is, the host's certificate should be placed in the beginning
          ## of the file, followed by the immediate issuer certificate and so on.
          ## Although the root CA certificate is optional, it should be placed at the end of
          ## the file if it is to be added.
          ## @path gateway.stomp.listeners.ssl.$name.ssl_options.certfile
          ## @type binary()
          #  certfile  =

          ## @doc PEM format private key file.
          ## @path gateway.stomp.listeners.ssl.$name.ssl_options.keyfile
          ## @type binary()
          #  keyfile  =

          ## @doc Enable or disable peer verification.
          ## @path gateway.stomp.listeners.ssl.$name.ssl_options.verify
          ## @type enum: verify_peer | verify_none
          ## @default verify_none
          #  verify = verify_none

          ## @doc Enable TLS session reuse.
          ## @path gateway.stomp.listeners.ssl.$name.ssl_options.reuse_sessions
          ## @type boolean()
          ## @default true
          #  reuse_sessions = true

          ## @doc Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path. So, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly; if 1 the path can be PEER, CA, ROOT-CA; if 2 the path can be PEER, CA, CA, ROOT-CA, and so on. The default value is 10.
          ## @path gateway.stomp.listeners.ssl.$name.ssl_options.depth
          ## @type integer()
          ## @default 10
          #  depth = 10

          ## @doc String containing the user's password.
          ## Only used if the private key file is password-protected.
          ## @path gateway.stomp.listeners.ssl.$name.ssl_options.password
          ## @type string()
          #  password = ""

          ## @doc All TLS/DTLS versions to be supported.</br>
          ## NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.</br>
          ## In case PSK cipher suites are intended, make sure to configured
          ## <code>['tlsv1.2', 'tlsv1.1']</code> here.
          ## @path gateway.stomp.listeners.ssl.$name.ssl_options.versions
          ## @type array()
          ## @default [tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]
          #  versions = [tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]

          ## @doc This config holds TLS cipher suite names separated by comma,
          ## or as an array of strings. e.g.
          ## <code>"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256"</code> or
          ## <code>["TLS_AES_256_GCM_SHA384","TLS_AES_128_GCM_SHA256"]</code>.
          ## </br>
          ## Ciphers (and their ordering) define the way in which the
          ## client and server encrypts information over the network connection.
          ## Selecting a good cipher suite is critical for the
          ## application's data security, confidentiality and performance.
          ##
          ## The names should be in OpenSSL string format (not RFC format).
          ## All default values and examples provided by EMQX config
          ## documentation are all in OpenSSL format.</br>
          ##
          ## NOTE: Certain cipher suites are only compatible with
          ## specific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')
          ## incompatible cipher suites will be silently dropped.
          ## For instance, if only 'tlsv1.3' is given in the <code>versions</code>,
          ## configuring cipher suites for other versions will have no effect.
          ## </br>
          ##
          ## NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config</br>
          ## If PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.</br>
          ## PSK cipher suites: <code>"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,
          ## RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,
          ## RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,
          ## RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA"</code></br>
          ## @path gateway.stomp.listeners.ssl.$name.ssl_options.ciphers
          ## @type array()
          ## @default ["TLS_AES_256_GCM_SHA384", "TLS_AES_128_GCM_SHA256", "TLS_CHACHA20_POLY1305_SHA256", "TLS_AES_128_CCM_SHA256", "TLS_AES_128_CCM_8_SHA256", "ECDHE-ECDSA-AES256-GCM-SHA384", "ECDHE-RSA-AES256-GCM-SHA384", "ECDHE-ECDSA-AES256-SHA384", "ECDHE-RSA-AES256-SHA384", "ECDH-ECDSA-AES256-GCM-SHA384", "ECDH-RSA-AES256-GCM-SHA384", "ECDH-ECDSA-AES256-SHA384", "ECDH-RSA-AES256-SHA384", "DHE-DSS-AES256-GCM-SHA384", "DHE-DSS-AES256-SHA256", "AES256-GCM-SHA384", "AES256-SHA256", "ECDHE-ECDSA-AES128-GCM-SHA256", "ECDHE-RSA-AES128-GCM-SHA256", "ECDHE-ECDSA-AES128-SHA256", "ECDHE-RSA-AES128-SHA256", "ECDH-ECDSA-AES128-GCM-SHA256", "ECDH-RSA-AES128-GCM-SHA256", "ECDH-ECDSA-AES128-SHA256", "ECDH-RSA-AES128-SHA256", "DHE-DSS-AES128-GCM-SHA256", "DHE-DSS-AES128-SHA256", "AES128-GCM-SHA256", "AES128-SHA256", "ECDHE-ECDSA-AES256-SHA", "ECDHE-RSA-AES256-SHA", "DHE-DSS-AES256-SHA", "ECDH-ECDSA-AES256-SHA", "ECDH-RSA-AES256-SHA", "ECDHE-ECDSA-AES128-SHA", "ECDHE-RSA-AES128-SHA", "DHE-DSS-AES128-SHA", "ECDH-ECDSA-AES128-SHA", "ECDH-RSA-AES128-SHA", "RSA-PSK-AES256-GCM-SHA384", "RSA-PSK-AES256-CBC-SHA384", "RSA-PSK-AES128-GCM-SHA256", "RSA-PSK-AES128-CBC-SHA256", "RSA-PSK-AES256-CBC-SHA", "RSA-PSK-AES128-CBC-SHA"]
          #  ciphers = ["TLS_AES_256_GCM_SHA384", "TLS_AES_128_GCM_SHA256", "TLS_CHACHA20_POLY1305_SHA256", "TLS_AES_128_CCM_SHA256", "TLS_AES_128_CCM_8_SHA256", "ECDHE-ECDSA-AES256-GCM-SHA384", "ECDHE-RSA-AES256-GCM-SHA384", "ECDHE-ECDSA-AES256-SHA384", "ECDHE-RSA-AES256-SHA384", "ECDH-ECDSA-AES256-GCM-SHA384", "ECDH-RSA-AES256-GCM-SHA384", "ECDH-ECDSA-AES256-SHA384", "ECDH-RSA-AES256-SHA384", "DHE-DSS-AES256-GCM-SHA384", "DHE-DSS-AES256-SHA256", "AES256-GCM-SHA384", "AES256-SHA256", "ECDHE-ECDSA-AES128-GCM-SHA256", "ECDHE-RSA-AES128-GCM-SHA256", "ECDHE-ECDSA-AES128-SHA256", "ECDHE-RSA-AES128-SHA256", "ECDH-ECDSA-AES128-GCM-SHA256", "ECDH-RSA-AES128-GCM-SHA256", "ECDH-ECDSA-AES128-SHA256", "ECDH-RSA-AES128-SHA256", "DHE-DSS-AES128-GCM-SHA256", "DHE-DSS-AES128-SHA256", "AES128-GCM-SHA256", "AES128-SHA256", "ECDHE-ECDSA-AES256-SHA", "ECDHE-RSA-AES256-SHA", "DHE-DSS-AES256-SHA", "ECDH-ECDSA-AES256-SHA", "ECDH-RSA-AES256-SHA", "ECDHE-ECDSA-AES128-SHA", "ECDHE-RSA-AES128-SHA", "DHE-DSS-AES128-SHA", "ECDH-ECDSA-AES128-SHA", "ECDH-RSA-AES128-SHA", "RSA-PSK-AES256-GCM-SHA384", "RSA-PSK-AES256-CBC-SHA384", "RSA-PSK-AES128-GCM-SHA256", "RSA-PSK-AES128-CBC-SHA256", "RSA-PSK-AES256-CBC-SHA", "RSA-PSK-AES128-CBC-SHA"]

          ## @doc EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.
          ## @path gateway.stomp.listeners.ssl.$name.ssl_options.user_lookup_fun
          ## @type string()
          ## @default "emqx_tls_psk:lookup"
          #  user_lookup_fun = "emqx_tls_psk:lookup"

          ## @doc SSL parameter renegotiation is a feature that allows a client and a server
          ## to renegotiate the parameters of the SSL connection on the fly.
          ## RFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,
          ## you drop support for the insecure renegotiation, prone to MitM attacks.
          ## @path gateway.stomp.listeners.ssl.$name.ssl_options.secure_renegotiate
          ## @type boolean()
          ## @default true
          #  secure_renegotiate = true

          ## @doc Path to a file containing PEM-encoded Diffie-Hellman parameters
          ## to be used by the server if a cipher suite using Diffie-Hellman
          ## key exchange is negotiated. If not specified, default parameters
          ## are used.</br>
          ## NOTE: The <code>dhfile</code> option is not supported by TLS 1.3.
          ## @path gateway.stomp.listeners.ssl.$name.ssl_options.dhfile
          ## @type string()
          #  dhfile  =

          ## @doc Used together with {verify, verify_peer} by an TLS/DTLS server.
          ## If set to true, the server fails if the client does not have a
          ## certificate to send, that is, sends an empty certificate.
          ## If set to false, it fails only if the client sends an invalid
          ## certificate (an empty certificate is considered valid).
          ## @path gateway.stomp.listeners.ssl.$name.ssl_options.fail_if_no_peer_cert
          ## @type boolean()
          ## @default false
          #  fail_if_no_peer_cert = false

          ## @doc An important security setting, it forces the cipher to be set based
          ##  on the server-specified order instead of the client-specified order,
          ##  hence enforcing the (usually more properly configured) security
          ##  ordering of the server administrator.
          ## @path gateway.stomp.listeners.ssl.$name.ssl_options.honor_cipher_order
          ## @type boolean()
          ## @default true
          #  honor_cipher_order = true

          ## @doc In protocols that support client-initiated renegotiation,
          ## the cost of resources of such an operation is higher for the server than the client.
          ## This can act as a vector for denial of service attacks.
          ## The SSL application already takes measures to counter-act such attempts,
          ## but client-initiated renegotiation can be strictly disabled by setting this option to false.
          ## The default value is true. Note that disabling renegotiation can result in
          ## long-lived connections becoming unusable due to limits on
          ## the number of messages the underlying cipher suite can encipher.
          ## @path gateway.stomp.listeners.ssl.$name.ssl_options.client_renegotiation
          ## @type boolean()
          ## @default true
          #  client_renegotiation = true
        #   }
      #   }

    }

  ## @doc Whether to enable this gateway
  ## @path gateway.stomp.enable
  ## @type boolean()
  ## @default true
  enable = true

  ## @doc Whether to enable client process statistic
  ## @path gateway.stomp.enable_stats
  ## @type boolean()
  ## @default true
  enable_stats = true

  ## @doc The idle time of the client connection process. It has two purposes:
  ##   1. A newly created client process that does not receive any client requests after that time will be closed directly.
  ##   2. A running client process that does not receive any client requests after this time will go into hibernation to save resources.
  ## @path gateway.stomp.idle_timeout
  ## @type emqx_gateway_schema:duration()
  ## @default 30s
  idle_timeout = 30s

  ## @path gateway.stomp.clientinfo_override
  clientinfo_override {
    ## @doc Template for overriding username.
    ## @path gateway.stomp.clientinfo_override.username
    ## @type binary()
    #  username  =

    ## @doc Template for overriding password.
    ## @path gateway.stomp.clientinfo_override.password
    ## @type binary()
    #  password  =

    ## @doc Template for overriding clientid.
    ## @path gateway.stomp.clientinfo_override.clientid
    ## @type binary()
    #  clientid  =
    }

  ## @doc Default authentication configs for all the gateway listeners. For per-listener overrides see <code>authentication</code>
  ##  in listener configs
  ## @path gateway.stomp.authentication
  ## @type union() authn-builtin_db:authentication | authn-mysql:authentication | authn-postgresql:authentication | authn-mongodb:standalone | authn-mongodb:replica-set | authn-mongodb:sharded-cluster | authn-redis:standalone | authn-redis:cluster | authn-redis:sentinel | authn-http:get | authn-http:post | authn-jwt:hmac-based | authn-jwt:public-key | authn-jwt:jwks | authn-scram-builtin_db:authentication
  ## @link gateway.stomp.listeners.tcp.$name.authentication
  #  authentication  =
}
