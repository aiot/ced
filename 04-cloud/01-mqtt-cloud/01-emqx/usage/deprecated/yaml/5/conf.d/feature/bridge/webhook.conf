bridges.webhook {
  default {
    enable = false

    direction = egress

    # url = https://emqx-webhook-server.${POD_NAMESPACE}.svc.cluster.local

    # @doc The timeout when connecting to the HTTP server.
    # @path bridges.webhook.$name.connect_timeout
    # @type emqx_schema:duration_ms()
    # @default 15s
    connect_timeout = 15s

    # @doc Max retry times if error on sending request.
    # @path bridges.webhook.$name.max_retries
    # @type non_neg_integer()
    # @default 5
    max_retries = 5

    # @doc Interval between retries.
    # @path bridges.webhook.$name.retry_interval
    # @type emqx_schema:duration()
    # @default 1s
    retry_interval = 1s

    # @doc The type of the pool. Can be one of `random`, `hash`.
    # @path bridges.webhook.$name.pool_type
    # @type emqx_connector_http:pool_type()
    # @default random
    pool_type = random

    # @doc The pool size.
    # @path bridges.webhook.$name.pool_size
    # @type pos_integer()
    # @default 8
    pool_size = 8

    # @doc Whether to send HTTP requests continuously, when set to 0, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.
    # @path bridges.webhook.$name.enable_pipelining
    # @type pos_integer()
    # @default 100
    enable_pipelining = 100

    # @doc The MQTT topic filter to be forwarded to the HTTP server. All MQTT 'PUBLISH' messages with the topic
    # matching the local_topic will be forwarded.</br>
    # NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is
    # configured, then both the data got from the rule and the MQTT messages that match local_topic
    # will be forwarded.
    # @path bridges.webhook.$name.local_topic
    # @type binary()
    local_topic =

    # @doc The method of the HTTP request. All the available methods are: post, put, get, delete.</br>
    # Template with variables is allowed.</br>
    # @path bridges.webhook.$name.method
    # @type enum: post | put | get | delete
    # @default post
    method = post

  # @doc The headers of the HTTP request.</br>
  # Template with variables is allowed.
  # @path bridges.webhook.$name.headers
  # @type map()
  # @default
      {  accept = "application/json"  "cache-control" = "no-cache"  connection = "keep-alive"  "content-type" = "application/json"  "keep-alive" = "timeout=5"}

    headers =
      {  accept = "application/json"  "cache-control" = "no-cache"  connection = "keep-alive"  "content-type" = "application/json"  "keep-alive" = "timeout=5"}

    # @doc The body of the HTTP request.</br>
    # Template with variables is allowed.
    # @path bridges.webhook.$name.body
    # @type binary()
    # @default "${payload}"
    body = "${payload}"

    # @doc HTTP request timeout.
    # @path bridges.webhook.$name.request_timeout
    # @type emqx_schema:duration_ms()
    # @default 15s
    request_timeout = 15s

    # @path bridges.webhook.$name.request
    request {
      # @doc HTTP method.
      # @path bridges.webhook.$name.request.method
      # @type enum: post | put | get | delete
      method =

      # @doc URL path.
      # @path bridges.webhook.$name.request.path
      # @type binary()
      path =

      # @doc HTTP request body.
      # @path bridges.webhook.$name.request.body
      # @type binary()
      body =

      # @doc List of HTTP headers.
      # @path bridges.webhook.$name.request.headers
      # @type map()
      headers =

      # @doc HTTP request timeout.
      # @path bridges.webhook.$name.request.request_timeout
      # @type emqx_schema:duration_ms()
      request_timeout =
    }

    ssl {
      keyfile =
      certfile =
      cacertfile =


      # @doc Enable or disable peer verification.
      # @path bridges.webhook.$name.ssl.verify
      # @type enum: verify_peer | verify_none
      # @default verify_none
      verify = verify_none

      # @doc Enable TLS session reuse.
      # @path bridges.webhook.$name.ssl.reuse_sessions
      # @type boolean()
      # @default true
      reuse_sessions = true

      # @doc Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path. So, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly; if 1 the path can be PEER, CA, ROOT-CA; if 2 the path can be PEER, CA, CA, ROOT-CA, and so on. The default value is 10.
      # @path bridges.webhook.$name.ssl.depth
      # @type integer()
      # @default 10
      depth = 10

      # @doc String containing the user's password.
      # Only used if the private key file is password-protected.
      # @path bridges.webhook.$name.ssl.password
      # @type string()
      password = ""

      versions = [
        tlsv1.3,
        tlsv1.2
      ]

      secure_renegotiate = true

      enable = true

      # @doc Specify the host name to be used in TLS Server Name Indication extension.</br>
      # For instance, when connecting to "server.example.net", the genuine server
      # which accepts the connection and performs TLS handshake may differ from the
      # host the TLS client initially connects to, e.g. when connecting to an IP address
      # or when the host has multiple resolvable DNS records </br>
      # If not specified, it will default to the host name string which is used
      # to establish the connection, unless it is IP addressed used.</br>
      # The host name is then also used in the host name verification of the peer
      # certificate.</br> The special value 'disable' prevents the Server Name
      # Indication extension from being sent and disables the hostname
      # verification check.
      # @path bridges.webhook.$name.ssl.server_name_indication
      # @type union() disable | string()
      server_name_indication = disable
    }
  }
}
