gateway.exproto {
  ## @path gateway.exproto.server
  server {
    ## @doc Listening address and port for the gRPC server.
    ## @path gateway.exproto.server.bind
    ## @type union() emqx_gateway_schema:ip_port() | integer()
    #  bind  =

    ## @path gateway.exproto.server.ssl_options
    ssl_options {
      ## @doc Trusted PEM format CA certificates bundle file.</br>
      ## The certificates in this file are used to verify the TLS peer's certificates.
      ## Append new certificates to the file if new CAs are to be trusted.
      ## There is no need to restart EMQX to have the updated file loaded, because
      ## the system regularly checks if file has been updated (and reload).</br>
      ## NOTE: invalidating (deleting) a certificate from the file will not affect
      ## already established connections.
      ## @path gateway.exproto.server.ssl_options.cacertfile
      ## @type binary()
      #  cacertfile  =

      ## @doc PEM format certificates chain file.</br>
      ## The certificates in this file should be in reversed order of the certificate
      ## issue chain. That is, the host's certificate should be placed in the beginning
      ## of the file, followed by the immediate issuer certificate and so on.
      ## Although the root CA certificate is optional, it should be placed at the end of
      ## the file if it is to be added.
      ## @path gateway.exproto.server.ssl_options.certfile
      ## @type binary()
      #  certfile  =

      ## @doc PEM format private key file.
      ## @path gateway.exproto.server.ssl_options.keyfile
      ## @type binary()
      #  keyfile  =

      ## @doc Enable or disable peer verification.
      ## @path gateway.exproto.server.ssl_options.verify
      ## @type enum: verify_peer | verify_none
      ## @default verify_none
      verify = verify_none

      ## @doc Enable TLS session reuse.
      ## @path gateway.exproto.server.ssl_options.reuse_sessions
      ## @type boolean()
      ## @default true
      reuse_sessions = true

      ## @doc Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path. So, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly; if 1 the path can be PEER, CA, ROOT-CA; if 2 the path can be PEER, CA, CA, ROOT-CA, and so on. The default value is 10.
      ## @path gateway.exproto.server.ssl_options.depth
      ## @type integer()
      ## @default 10
      depth = 10

      ## @doc String containing the user's password.
      ## Only used if the private key file is password-protected.
      ## @path gateway.exproto.server.ssl_options.password
      ## @type string()
      password = ""

      ## @doc All TLS/DTLS versions to be supported.</br>
      ## NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.</br>
      ## In case PSK cipher suites are intended, make sure to configured
      ## <code>['tlsv1.2', 'tlsv1.1']</code> here.
      ## @path gateway.exproto.server.ssl_options.versions
      ## @type array()
      ## @default [tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]
      versions = [tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]

      ## @doc This config holds TLS cipher suite names separated by comma,
      ## or as an array of strings. e.g.
      ## <code>"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256"</code> or
      ## <code>["TLS_AES_256_GCM_SHA384","TLS_AES_128_GCM_SHA256"]</code>.
      ## </br>
      ## Ciphers (and their ordering) define the way in which the
      ## client and server encrypts information over the network connection.
      ## Selecting a good cipher suite is critical for the
      ## application's data security, confidentiality and performance.
      ##
      ## The names should be in OpenSSL string format (not RFC format).
      ## All default values and examples provided by EMQX config
      ## documentation are all in OpenSSL format.</br>
      ##
      ## NOTE: Certain cipher suites are only compatible with
      ## specific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')
      ## incompatible cipher suites will be silently dropped.
      ## For instance, if only 'tlsv1.3' is given in the <code>versions</code>,
      ## configuring cipher suites for other versions will have no effect.
      ## </br>
      ##
      ## NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config</br>
      ## If PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.</br>
      ## PSK cipher suites: <code>"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,
      ## RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,
      ## RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,
      ## RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA"</code></br>
      ## @path gateway.exproto.server.ssl_options.ciphers
      ## @type array()
      ## @default ["TLS_AES_256_GCM_SHA384", "TLS_AES_128_GCM_SHA256", "TLS_CHACHA20_POLY1305_SHA256", "TLS_AES_128_CCM_SHA256", "TLS_AES_128_CCM_8_SHA256", "ECDHE-ECDSA-AES256-GCM-SHA384", "ECDHE-RSA-AES256-GCM-SHA384", "ECDHE-ECDSA-AES256-SHA384", "ECDHE-RSA-AES256-SHA384", "ECDH-ECDSA-AES256-GCM-SHA384", "ECDH-RSA-AES256-GCM-SHA384", "ECDH-ECDSA-AES256-SHA384", "ECDH-RSA-AES256-SHA384", "DHE-DSS-AES256-GCM-SHA384", "DHE-DSS-AES256-SHA256", "AES256-GCM-SHA384", "AES256-SHA256", "ECDHE-ECDSA-AES128-GCM-SHA256", "ECDHE-RSA-AES128-GCM-SHA256", "ECDHE-ECDSA-AES128-SHA256", "ECDHE-RSA-AES128-SHA256", "ECDH-ECDSA-AES128-GCM-SHA256", "ECDH-RSA-AES128-GCM-SHA256", "ECDH-ECDSA-AES128-SHA256", "ECDH-RSA-AES128-SHA256", "DHE-DSS-AES128-GCM-SHA256", "DHE-DSS-AES128-SHA256", "AES128-GCM-SHA256", "AES128-SHA256", "ECDHE-ECDSA-AES256-SHA", "ECDHE-RSA-AES256-SHA", "DHE-DSS-AES256-SHA", "ECDH-ECDSA-AES256-SHA", "ECDH-RSA-AES256-SHA", "ECDHE-ECDSA-AES128-SHA", "ECDHE-RSA-AES128-SHA", "DHE-DSS-AES128-SHA", "ECDH-ECDSA-AES128-SHA", "ECDH-RSA-AES128-SHA", "RSA-PSK-AES256-GCM-SHA384", "RSA-PSK-AES256-CBC-SHA384", "RSA-PSK-AES128-GCM-SHA256", "RSA-PSK-AES128-CBC-SHA256", "RSA-PSK-AES256-CBC-SHA", "RSA-PSK-AES128-CBC-SHA"]
      ciphers = ["TLS_AES_256_GCM_SHA384", "TLS_AES_128_GCM_SHA256", "TLS_CHACHA20_POLY1305_SHA256", "TLS_AES_128_CCM_SHA256", "TLS_AES_128_CCM_8_SHA256", "ECDHE-ECDSA-AES256-GCM-SHA384", "ECDHE-RSA-AES256-GCM-SHA384", "ECDHE-ECDSA-AES256-SHA384", "ECDHE-RSA-AES256-SHA384", "ECDH-ECDSA-AES256-GCM-SHA384", "ECDH-RSA-AES256-GCM-SHA384", "ECDH-ECDSA-AES256-SHA384", "ECDH-RSA-AES256-SHA384", "DHE-DSS-AES256-GCM-SHA384", "DHE-DSS-AES256-SHA256", "AES256-GCM-SHA384", "AES256-SHA256", "ECDHE-ECDSA-AES128-GCM-SHA256", "ECDHE-RSA-AES128-GCM-SHA256", "ECDHE-ECDSA-AES128-SHA256", "ECDHE-RSA-AES128-SHA256", "ECDH-ECDSA-AES128-GCM-SHA256", "ECDH-RSA-AES128-GCM-SHA256", "ECDH-ECDSA-AES128-SHA256", "ECDH-RSA-AES128-SHA256", "DHE-DSS-AES128-GCM-SHA256", "DHE-DSS-AES128-SHA256", "AES128-GCM-SHA256", "AES128-SHA256", "ECDHE-ECDSA-AES256-SHA", "ECDHE-RSA-AES256-SHA", "DHE-DSS-AES256-SHA", "ECDH-ECDSA-AES256-SHA", "ECDH-RSA-AES256-SHA", "ECDHE-ECDSA-AES128-SHA", "ECDHE-RSA-AES128-SHA", "DHE-DSS-AES128-SHA", "ECDH-ECDSA-AES128-SHA", "ECDH-RSA-AES128-SHA", "RSA-PSK-AES256-GCM-SHA384", "RSA-PSK-AES256-CBC-SHA384", "RSA-PSK-AES128-GCM-SHA256", "RSA-PSK-AES128-CBC-SHA256", "RSA-PSK-AES256-CBC-SHA", "RSA-PSK-AES128-CBC-SHA"]

      ## @doc EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.
      ## @path gateway.exproto.server.ssl_options.user_lookup_fun
      ## @type string()
      ## @default "emqx_tls_psk:lookup"
      user_lookup_fun = "emqx_tls_psk:lookup"

      ## @doc SSL parameter renegotiation is a feature that allows a client and a server
      ## to renegotiate the parameters of the SSL connection on the fly.
      ## RFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,
      ## you drop support for the insecure renegotiation, prone to MitM attacks.
      ## @path gateway.exproto.server.ssl_options.secure_renegotiate
      ## @type boolean()
      ## @default true
      secure_renegotiate = true

      ## @doc Path to a file containing PEM-encoded Diffie-Hellman parameters
      ## to be used by the server if a cipher suite using Diffie-Hellman
      ## key exchange is negotiated. If not specified, default parameters
      ## are used.</br>
      ## NOTE: The <code>dhfile</code> option is not supported by TLS 1.3.
      ## @path gateway.exproto.server.ssl_options.dhfile
      ## @type string()
      #  dhfile  =

      ## @doc Used together with {verify, verify_peer} by an TLS/DTLS server.
      ## If set to true, the server fails if the client does not have a
      ## certificate to send, that is, sends an empty certificate.
      ## If set to false, it fails only if the client sends an invalid
      ## certificate (an empty certificate is considered valid).
      ## @path gateway.exproto.server.ssl_options.fail_if_no_peer_cert
      ## @type boolean()
      ## @default false
      fail_if_no_peer_cert = false

      ## @doc An important security setting, it forces the cipher to be set based
      ##  on the server-specified order instead of the client-specified order,
      ##  hence enforcing the (usually more properly configured) security
      ##  ordering of the server administrator.
      ## @path gateway.exproto.server.ssl_options.honor_cipher_order
      ## @type boolean()
      ## @default true
      honor_cipher_order = true

      ## @doc In protocols that support client-initiated renegotiation,
      ## the cost of resources of such an operation is higher for the server than the client.
      ## This can act as a vector for denial of service attacks.
      ## The SSL application already takes measures to counter-act such attempts,
      ## but client-initiated renegotiation can be strictly disabled by setting this option to false.
      ## The default value is true. Note that disabling renegotiation can result in
      ## long-lived connections becoming unusable due to limits on
      ## the number of messages the underlying cipher suite can encipher.
      ## @path gateway.exproto.server.ssl_options.client_renegotiation
      ## @type boolean()
      ## @default true
      client_renegotiation = true

      ## @doc Maximum time duration allowed for the handshake to complete
      ## @path gateway.exproto.server.ssl_options.handshake_timeout
      ## @type emqx_schema:duration()
      ## @default 15s
      handshake_timeout = 15s
      }
    }

  ## @path gateway.exproto.handler
  handler {
    ## @doc gRPC server address.
    ## @path gateway.exproto.handler.address
    ## @type binary()
    #  address  =

    ## @path gateway.exproto.handler.ssl_options
    ## @link cluster.etcd.ssl
    ssl_options {
      ## @doc Trusted PEM format CA certificates bundle file.</br>
      ## The certificates in this file are used to verify the TLS peer's certificates.
      ## Append new certificates to the file if new CAs are to be trusted.
      ## There is no need to restart EMQX to have the updated file loaded, because
      ## the system regularly checks if file has been updated (and reload).</br>
      ## NOTE: invalidating (deleting) a certificate from the file will not affect
      ## already established connections.
      ## @path gateway.exproto.handler.ssl_options.cacertfile
      ## @type binary()
      #  cacertfile  =

      ## @doc PEM format certificates chain file.</br>
      ## The certificates in this file should be in reversed order of the certificate
      ## issue chain. That is, the host's certificate should be placed in the beginning
      ## of the file, followed by the immediate issuer certificate and so on.
      ## Although the root CA certificate is optional, it should be placed at the end of
      ## the file if it is to be added.
      ## @path gateway.exproto.handler.ssl_options.certfile
      ## @type binary()
      #  certfile  =

      ## @doc PEM format private key file.
      ## @path gateway.exproto.handler.ssl_options.keyfile
      ## @type binary()
      #  keyfile  =

      ## @doc Enable or disable peer verification.
      ## @path gateway.exproto.handler.ssl_options.verify
      ## @type enum: verify_peer | verify_none
      ## @default verify_none
      verify = verify_none

      ## @doc Enable TLS session reuse.
      ## @path gateway.exproto.handler.ssl_options.reuse_sessions
      ## @type boolean()
      ## @default true
      reuse_sessions = true

      ## @doc Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path. So, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly; if 1 the path can be PEER, CA, ROOT-CA; if 2 the path can be PEER, CA, CA, ROOT-CA, and so on. The default value is 10.
      ## @path gateway.exproto.handler.ssl_options.depth
      ## @type integer()
      ## @default 10
      depth = 10

      ## @doc String containing the user's password.
      ## Only used if the private key file is password-protected.
      ## @path gateway.exproto.handler.ssl_options.password
      ## @type string()
      password = ""

      ## @doc All TLS/DTLS versions to be supported.</br>
      ## NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.</br>
      ## In case PSK cipher suites are intended, make sure to configured
      ## <code>['tlsv1.2', 'tlsv1.1']</code> here.
      ## @path gateway.exproto.handler.ssl_options.versions
      ## @type array()
      ## @default [tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]
      versions = [tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]

      ## @doc This config holds TLS cipher suite names separated by comma,
      ## or as an array of strings. e.g.
      ## <code>"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256"</code> or
      ## <code>["TLS_AES_256_GCM_SHA384","TLS_AES_128_GCM_SHA256"]</code>.
      ## </br>
      ## Ciphers (and their ordering) define the way in which the
      ## client and server encrypts information over the network connection.
      ## Selecting a good cipher suite is critical for the
      ## application's data security, confidentiality and performance.
      ##
      ## The names should be in OpenSSL string format (not RFC format).
      ## All default values and examples provided by EMQX config
      ## documentation are all in OpenSSL format.</br>
      ##
      ## NOTE: Certain cipher suites are only compatible with
      ## specific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')
      ## incompatible cipher suites will be silently dropped.
      ## For instance, if only 'tlsv1.3' is given in the <code>versions</code>,
      ## configuring cipher suites for other versions will have no effect.
      ## </br>
      ##
      ## NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config</br>
      ## If PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.</br>
      ## PSK cipher suites: <code>"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,
      ## RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,
      ## RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,
      ## RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA"</code></br>
      ## @path gateway.exproto.handler.ssl_options.ciphers
      ## @type array()
      ## @default ["TLS_AES_256_GCM_SHA384", "TLS_AES_128_GCM_SHA256", "TLS_CHACHA20_POLY1305_SHA256", "TLS_AES_128_CCM_SHA256", "TLS_AES_128_CCM_8_SHA256", "ECDHE-ECDSA-AES256-GCM-SHA384", "ECDHE-RSA-AES256-GCM-SHA384", "ECDHE-ECDSA-AES256-SHA384", "ECDHE-RSA-AES256-SHA384", "ECDH-ECDSA-AES256-GCM-SHA384", "ECDH-RSA-AES256-GCM-SHA384", "ECDH-ECDSA-AES256-SHA384", "ECDH-RSA-AES256-SHA384", "DHE-DSS-AES256-GCM-SHA384", "DHE-DSS-AES256-SHA256", "AES256-GCM-SHA384", "AES256-SHA256", "ECDHE-ECDSA-AES128-GCM-SHA256", "ECDHE-RSA-AES128-GCM-SHA256", "ECDHE-ECDSA-AES128-SHA256", "ECDHE-RSA-AES128-SHA256", "ECDH-ECDSA-AES128-GCM-SHA256", "ECDH-RSA-AES128-GCM-SHA256", "ECDH-ECDSA-AES128-SHA256", "ECDH-RSA-AES128-SHA256", "DHE-DSS-AES128-GCM-SHA256", "DHE-DSS-AES128-SHA256", "AES128-GCM-SHA256", "AES128-SHA256", "ECDHE-ECDSA-AES256-SHA", "ECDHE-RSA-AES256-SHA", "DHE-DSS-AES256-SHA", "ECDH-ECDSA-AES256-SHA", "ECDH-RSA-AES256-SHA", "ECDHE-ECDSA-AES128-SHA", "ECDHE-RSA-AES128-SHA", "DHE-DSS-AES128-SHA", "ECDH-ECDSA-AES128-SHA", "ECDH-RSA-AES128-SHA", "RSA-PSK-AES256-GCM-SHA384", "RSA-PSK-AES256-CBC-SHA384", "RSA-PSK-AES128-GCM-SHA256", "RSA-PSK-AES128-CBC-SHA256", "RSA-PSK-AES256-CBC-SHA", "RSA-PSK-AES128-CBC-SHA"]
      ciphers = ["TLS_AES_256_GCM_SHA384", "TLS_AES_128_GCM_SHA256", "TLS_CHACHA20_POLY1305_SHA256", "TLS_AES_128_CCM_SHA256", "TLS_AES_128_CCM_8_SHA256", "ECDHE-ECDSA-AES256-GCM-SHA384", "ECDHE-RSA-AES256-GCM-SHA384", "ECDHE-ECDSA-AES256-SHA384", "ECDHE-RSA-AES256-SHA384", "ECDH-ECDSA-AES256-GCM-SHA384", "ECDH-RSA-AES256-GCM-SHA384", "ECDH-ECDSA-AES256-SHA384", "ECDH-RSA-AES256-SHA384", "DHE-DSS-AES256-GCM-SHA384", "DHE-DSS-AES256-SHA256", "AES256-GCM-SHA384", "AES256-SHA256", "ECDHE-ECDSA-AES128-GCM-SHA256", "ECDHE-RSA-AES128-GCM-SHA256", "ECDHE-ECDSA-AES128-SHA256", "ECDHE-RSA-AES128-SHA256", "ECDH-ECDSA-AES128-GCM-SHA256", "ECDH-RSA-AES128-GCM-SHA256", "ECDH-ECDSA-AES128-SHA256", "ECDH-RSA-AES128-SHA256", "DHE-DSS-AES128-GCM-SHA256", "DHE-DSS-AES128-SHA256", "AES128-GCM-SHA256", "AES128-SHA256", "ECDHE-ECDSA-AES256-SHA", "ECDHE-RSA-AES256-SHA", "DHE-DSS-AES256-SHA", "ECDH-ECDSA-AES256-SHA", "ECDH-RSA-AES256-SHA", "ECDHE-ECDSA-AES128-SHA", "ECDHE-RSA-AES128-SHA", "DHE-DSS-AES128-SHA", "ECDH-ECDSA-AES128-SHA", "ECDH-RSA-AES128-SHA", "RSA-PSK-AES256-GCM-SHA384", "RSA-PSK-AES256-CBC-SHA384", "RSA-PSK-AES128-GCM-SHA256", "RSA-PSK-AES128-CBC-SHA256", "RSA-PSK-AES256-CBC-SHA", "RSA-PSK-AES128-CBC-SHA"]

      ## @doc EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.
      ## @path gateway.exproto.handler.ssl_options.user_lookup_fun
      ## @type string()
      ## @default "emqx_tls_psk:lookup"
      user_lookup_fun = "emqx_tls_psk:lookup"

      ## @doc SSL parameter renegotiation is a feature that allows a client and a server
      ## to renegotiate the parameters of the SSL connection on the fly.
      ## RFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,
      ## you drop support for the insecure renegotiation, prone to MitM attacks.
      ## @path gateway.exproto.handler.ssl_options.secure_renegotiate
      ## @type boolean()
      ## @default true
      secure_renegotiate = true

      ## @doc Enable TLS.
      ## @path gateway.exproto.handler.ssl_options.enable
      ## @type boolean()
      ## @default false
      enable = false

      ## @doc Specify the host name to be used in TLS Server Name Indication extension.</br>
      ## For instance, when connecting to "server.example.net", the genuine server
      ## which accepts the connection and performs TLS handshake may differ from the
      ## host the TLS client initially connects to, e.g. when connecting to an IP address
      ## or when the host has multiple resolvable DNS records </br>
      ## If not specified, it will default to the host name string which is used
      ## to establish the connection, unless it is IP addressed used.</br>
      ## The host name is then also used in the host name verification of the peer
      ## certificate.</br> The special value 'disable' prevents the Server Name
      ## Indication extension from being sent and disables the hostname
      ## verification check.
      ## @path gateway.exproto.handler.ssl_options.server_name_indication
      ## @type union() disable | string()
      server_name_indication = disable
      }
    }

  ## @doc
  ## @path gateway.exproto.mountpoint
  ## @type binary()
  ## @default ""
  mountpoint = ""

  ## @path gateway.exproto.listeners
  listeners {
    ## @doc
    ## @path gateway.exproto.listeners.tcp
    ## @type map_struct()
    ## @link gateway.stomp.listeners.tcp.$name


    ## @doc
    ## @path gateway.exproto.listeners.ssl
    ## @type map_struct()
    ## @link gateway.stomp.listeners.ssl.$name


    ## @doc
    ## @path gateway.exproto.listeners.udp
    ## @type map_struct()
    ## @link gateway.mqttsn.listeners.udp.$name


    ## @doc
    ## @path gateway.exproto.listeners.dtls
    ## @type map_struct()
    ## @link gateway.mqttsn.listeners.dtls.$name

    }

  ## @doc Whether to enable this gateway
  ## @path gateway.exproto.enable
  ## @type boolean()
  ## @default true
  enable = true

  ## @doc Whether to enable client process statistic
  ## @path gateway.exproto.enable_stats
  ## @type boolean()
  ## @default true
  enable_stats = true

  ## @doc The idle time of the client connection process. It has two purposes:
  ##   1. A newly created client process that does not receive any client requests after that time will be closed directly.
  ##   2. A running client process that does not receive any client requests after this time will go into hibernation to save resources.
  ## @path gateway.exproto.idle_timeout
  ## @type emqx_gateway_schema:duration()
  ## @default 30s
  idle_timeout = 30s

  ## @path gateway.exproto.clientinfo_override
  ## @link gateway.stomp.clientinfo_override
  clientinfo_override {
    ## @doc Template for overriding username.
    ## @path gateway.exproto.clientinfo_override.username
    ## @type binary()
    #  username  =

    ## @doc Template for overriding password.
    ## @path gateway.exproto.clientinfo_override.password
    ## @type binary()
    #  password  =

    ## @doc Template for overriding clientid.
    ## @path gateway.exproto.clientinfo_override.clientid
    ## @type binary()
    #  clientid  =
    }

  ## @doc Default authentication configs for all the gateway listeners. For per-listener overrides see <code>authentication</code>
  ##  in listener configs
  ## @path gateway.exproto.authentication
  ## @type union() authn-builtin_db:authentication | authn-mysql:authentication | authn-postgresql:authentication | authn-mongodb:standalone | authn-mongodb:replica-set | authn-mongodb:sharded-cluster | authn-redis:standalone | authn-redis:cluster | authn-redis:sentinel | authn-http:get | authn-http:post | authn-jwt:hmac-based | authn-jwt:public-key | authn-jwt:jwks | authn-scram-builtin_db:authentication
  ## @link gateway.stomp.listeners.tcp.$name.authentication
  #  authentication  =
}
