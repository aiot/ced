## @doc System topics configuration.
## @path sys_topics
sys_topics {
  ## @doc Time interval of publishing `$SYS` messages.
  ## @path sys_topics.sys_msg_interval
  ## @type union() disabled | emqx_schema:duration()
  ## @default 1m
  sys_msg_interval = 1m

  ## @doc Time interval for publishing following heartbeat messages:
  ##   - `$SYS/brokers/<node>/uptime`
  ##   - `$SYS/brokers/<node>/datetime`
  ## @path sys_topics.sys_heartbeat_interval
  ## @type union() disabled | emqx_schema:duration()
  ## @default 30s
  sys_heartbeat_interval = 30s

  ## @path sys_topics.sys_event_messages
  sys_event_messages {
    ## @doc Enable to publish client connected event messages
    ## @path sys_topics.sys_event_messages.client_connected
    ## @type boolean()
    ## @default true
    client_connected = true

    ## @doc Enable to publish client disconnected event messages.
    ## @path sys_topics.sys_event_messages.client_disconnected
    ## @type boolean()
    ## @default true
    client_disconnected = true

    ## @doc Enable to publish event message that client subscribed a topic successfully.
    ## @path sys_topics.sys_event_messages.client_subscribed
    ## @type boolean()
    ## @default false
    client_subscribed = false

    ## @doc Enable to publish event message that client unsubscribed a topic successfully.
    ## @path sys_topics.sys_event_messages.client_unsubscribed
    ## @type boolean()
    ## @default false
    client_unsubscribed = false
   }
 }
## @path force_shutdown
force_shutdown {
  ## @doc Enable `force_shutdown` feature.
  ## @path force_shutdown.enable
  ## @type boolean()
  ## @default true
  enable = true

  ## @doc Maximum message queue length.
  ## @path force_shutdown.max_message_queue_len
  ## @type 0..inf
  ## @default 1000
  max_message_queue_len = 1000

  ## @doc Total heap size
  ## @path force_shutdown.max_heap_size
  ## @type emqx_schema:wordsize()
  ## @default 32MB
  max_heap_size = 32MB
 }
## @path overload_protection
overload_protection {
  ## @doc React on system overload or not
  ## @path overload_protection.enable
  ## @type boolean()
  ## @default false
  enable = false

  ## @doc Some unimportant tasks could be delayed for execution, here set the delays in ms
  ## @path overload_protection.backoff_delay
  ## @type 0..inf
  ## @default 1
  backoff_delay = 1

  ## @doc Skip forceful GC if necessary
  ## @path overload_protection.backoff_gc
  ## @type boolean()
  ## @default false
  backoff_gc = false

  ## @doc Skip process hibernation if necessary
  ## @path overload_protection.backoff_hibernation
  ## @type boolean()
  ## @default true
  backoff_hibernation = true

  ## @doc Close new incoming connections if necessary
  ## @path overload_protection.backoff_new_conn
  ## @type boolean()
  ## @default true
  backoff_new_conn = true
 }
## @path force_gc
force_gc {
  ## @doc Enable forced garbage collection.
  ## @path force_gc.enable
  ## @type boolean()
  ## @default true
  enable = true

  ## @doc GC the process after this many received messages.
  ## @path force_gc.count
  ## @type 0..inf
  ## @default 16000
  count = 16000

  ## @doc GC the process after specified number of bytes have passed through.
  ## @path force_gc.bytes
  ## @type emqx_schema:bytesize()
  ## @default 16MB
  bytes = 16MB
 }
## @path conn_congestion
conn_congestion {
  ## @doc Enable or disable connection congestion alarm.
  ## @path conn_congestion.enable_alarm
  ## @type boolean()
  ## @default true
  enable_alarm = true

  ## @doc Minimal time before clearing the alarm.
  ##
  ## The alarm is cleared only when there's no pending data in
  ## the queue, and at least `min_alarm_sustain_duration`
  ## milliseconds passed since the last time we considered the connection "congested".
  ##
  ## This is to avoid clearing and raising the alarm again too often.
  ## @path conn_congestion.min_alarm_sustain_duration
  ## @type emqx_schema:duration()
  ## @default 1m
  min_alarm_sustain_duration = 1m
 }



## @path persistent_session_store
persistent_session_store {
  ## @doc Use the database to store information about persistent sessions.
  ## This makes it possible to migrate a client connection to another
  ## cluster node if a node is stopped.
  ## @path persistent_session_store.enabled
  ## @type boolean()
  ## @default false
  enabled = false

  ## @doc Save information about the persistent sessions on disc.
  ## If this option is enabled, persistent sessions will survive full restart of the cluster.
  ## Otherwise, all the data will be stored in RAM, and it will be lost when all the nodes in the cluster are stopped.
  ## @path persistent_session_store.on_disc
  ## @type boolean()
  ## @default true
  on_disc = true

  ## @doc Maintain a copy of the data in RAM for faster access.
  ## @path persistent_session_store.ram_cache
  ## @type boolean()
  ## @default false
  ram_cache = false

  ## @doc Database management system used to store information about persistent sessions and messages.
  ## - `builtin`: Use the embedded database (mria)
  ## @path persistent_session_store.backend
  ## @type union() broker:persistent_session_builtin
  ## @default
    #  {  messages {ram_cache = "false"}  session {ram_cache = "true"}  session_messages {ram_cache = "true"}  type = "builtin"}

  backend  =
      {  messages {ram_cache = "false"}  session {ram_cache = "true"}  session_messages {ram_cache = "true"}  type = "builtin"}


  ## @doc The time messages that was not delivered to a persistent session
  ## is stored before being garbage collected if the node the previous
  ## session was handled on restarts of is stopped.
  ## @path persistent_session_store.max_retain_undelivered
  ## @type emqx_schema:duration()
  ## @default 1h
  max_retain_undelivered = 1h

  ## @doc The starting interval for garbage collection of undelivered messages to
  ## a persistent session. This affects how often the "max_retain_undelivered"
  ## is checked for removal.
  ## @path persistent_session_store.message_gc_interval
  ## @type emqx_schema:duration()
  ## @default 1h
  message_gc_interval = 1h

  ## @doc The starting interval for garbage collection of transient data for
  ## persistent session messages. This does not affect the lifetime length
  ## of persistent session messages.
  ## @path persistent_session_store.session_message_gc_interval
  ## @type emqx_schema:duration()
  ## @default 1m
  session_message_gc_interval = 1m
 }


## @doc List of topic rewrite rules.
## @doc List of topic rewrite rules.
## @path rewrite
## @type array()
rewrite = []
## @doc List of topics whose metrics are reported.
## @doc List of topics whose metrics are reported.
## @path topic_metrics
## @type array()
topic_metrics = []

## @path psk_authentication
psk_authentication {
  ## @doc Whether to enable TLS PSK support
  ## @path psk_authentication.enable
  ## @type boolean()
  ## @default false
  enable = false

  ## @doc If init_file is specified, EMQX will import PSKs from the file into the built-in database at startup for use by the runtime.
  ## The file has to be structured line-by-line, each line must be in the format of <code>PSKIdentity:SharedSecret</code>.
  ## For example: <code>mydevice1:c2VjcmV0</code>
  ## @path psk_authentication.init_file
  ## @type binary()
  #  init_file  =

  ## @doc The separator between <code>PSKIdentity</code> and <code>SharedSecret</code> in the PSK file
  ## @path psk_authentication.separator
  ## @type binary()
  ## @default ":"
  separator = ":"

  ## @doc The size of each chunk used to import to the built-in database from PSK file
  ## @path psk_authentication.chunk_size
  ## @type integer()
  ## @default 50
  chunk_size = 50
 }
## @path limiter
limiter {
  ## @path limiter.bytes_in
  bytes_in {
    ## @doc Rate for this bucket.
    ## @path limiter.bytes_in.rate
    ## @type emqx_limiter_schema:rate()
    ## @default infinity
    rate = infinity

    ## @doc The burst, This value is based on rate.</br>
    ##  This value + rate = the maximum limit that can be achieved when limiter burst.
    ## @path limiter.bytes_in.burst
    ## @type emqx_limiter_schema:burst_rate()
    ## @default 0
    burst = 0

    ## @doc Bucket Configs
    ## @path limiter.bytes_in.bucket
    ## @type map_struct()
    ## @default
      #  {  default {}}

      #  bucket.bucket_name  =
      ## @path limiter.bytes_in.bucket.$bucket_name
      #   {
        ## @doc Rate for this bucket.
        ## @path limiter.bytes_in.bucket.$bucket_name.rate
        ## @type emqx_limiter_schema:rate()
        ## @default infinity
        #  rate = infinity

        ## @doc The capacity of this token bucket.
        ## @path limiter.bytes_in.bucket.$bucket_name.capacity
        ## @type emqx_limiter_schema:capacity()
        ## @default infinity
        #  capacity = infinity

        ## @doc The initial number of tokens for this bucket.
        ## @path limiter.bytes_in.bucket.$bucket_name.initial
        ## @type emqx_limiter_schema:initial()
        ## @default 0
        #  initial = 0

        ## @path limiter.bytes_in.bucket.$bucket_name.per_client
        #  per_client {
          ## @doc Rate for this bucket.
          ## @path limiter.bytes_in.bucket.$bucket_name.per_client.rate
          ## @type emqx_limiter_schema:rate()
          ## @default infinity
          #  rate = infinity

          ## @doc The initial number of tokens for this bucket.
          ## @path limiter.bytes_in.bucket.$bucket_name.per_client.initial
          ## @type emqx_limiter_schema:initial()
          ## @default 0
          #  initial = 0

          ## @doc If the remaining tokens are lower than this value,
          ## the check/consume will succeed, but it will be forced to wait for a short period of time.
          ## @path limiter.bytes_in.bucket.$bucket_name.per_client.low_watermark
          ## @type emqx_limiter_schema:initial()
          ## @default 0
          #  low_watermark = 0

          ## @doc The capacity of per user.
          ## @path limiter.bytes_in.bucket.$bucket_name.per_client.capacity
          ## @type emqx_limiter_schema:capacity()
          ## @default infinity
          #  capacity = infinity

          ## @doc Is it possible to split the number of requested tokens?
          ## @path limiter.bytes_in.bucket.$bucket_name.per_client.divisible
          ## @type boolean()
          ## @default false
          #  divisible = false

          ## @doc The maximum retry time when acquire failed.
          ## @path limiter.bytes_in.bucket.$bucket_name.per_client.max_retry_time
          ## @type emqx_schema:duration()
          ## @default 10s
          #  max_retry_time = 10s

          ## @doc The strategy when all the retries failed.
          ## @path limiter.bytes_in.bucket.$bucket_name.per_client.failure_strategy
          ## @type emqx_limiter_schema:failure_strategy()
          ## @default force
          #  failure_strategy = force
        #   }
      #   }

   }

  ## @path limiter.message_in
  ## @link limiter.bytes_in
  message_in {
    ## @doc Rate for this bucket.
    ## @path limiter.message_in.rate
    ## @type emqx_limiter_schema:rate()
    ## @default infinity
    rate = infinity

    ## @doc The burst, This value is based on rate.</br>
    ##  This value + rate = the maximum limit that can be achieved when limiter burst.
    ## @path limiter.message_in.burst
    ## @type emqx_limiter_schema:burst_rate()
    ## @default 0
    burst = 0

    ## @doc Bucket Configs
    ## @path limiter.message_in.bucket
    ## @type map_struct()
    ## @default
      #  {  default {}}

    ## @link limiter.bytes_in.bucket.$bucket_name

   }

  ## @path limiter.connection
  ## @link limiter.bytes_in
  connection {
    ## @doc Rate for this bucket.
    ## @path limiter.connection.rate
    ## @type emqx_limiter_schema:rate()
    ## @default infinity
    rate = infinity

    ## @doc The burst, This value is based on rate.</br>
    ##  This value + rate = the maximum limit that can be achieved when limiter burst.
    ## @path limiter.connection.burst
    ## @type emqx_limiter_schema:burst_rate()
    ## @default 0
    burst = 0

    ## @doc Bucket Configs
    ## @path limiter.connection.bucket
    ## @type map_struct()
    ## @default
      #  {  default {}}

    ## @link limiter.bytes_in.bucket.$bucket_name

   }

  ## @path limiter.message_routing
  ## @link limiter.bytes_in
  message_routing {
    ## @doc Rate for this bucket.
    ## @path limiter.message_routing.rate
    ## @type emqx_limiter_schema:rate()
    ## @default infinity
    rate = infinity

    ## @doc The burst, This value is based on rate.</br>
    ##  This value + rate = the maximum limit that can be achieved when limiter burst.
    ## @path limiter.message_routing.burst
    ## @type emqx_limiter_schema:burst_rate()
    ## @default 0
    burst = 0

    ## @doc Bucket Configs
    ## @path limiter.message_routing.bucket
    ## @type map_struct()
    ## @default
      #  {  default {}}

    ## @link limiter.bytes_in.bucket.$bucket_name

   }

  ## @path limiter.batch
  ## @link limiter.bytes_in
  batch {
    ## @doc Rate for this bucket.
    ## @path limiter.batch.rate
    ## @type emqx_limiter_schema:rate()
    ## @default infinity
    rate = infinity

    ## @doc The burst, This value is based on rate.</br>
    ##  This value + rate = the maximum limit that can be achieved when limiter burst.
    ## @path limiter.batch.burst
    ## @type emqx_limiter_schema:burst_rate()
    ## @default 0
    burst = 0

    ## @doc Bucket Configs
    ## @path limiter.batch.bucket
    ## @type map_struct()
    ## @default
      #  {  default {}}

    ## @link limiter.bytes_in.bucket.$bucket_name

   }
 }
## @path connectors
connectors {
  ## @doc MQTT bridges.
  ## @path connectors.mqtt
  ## @type map_struct()
    #  mqtt.name  =
    ## @path connectors.mqtt.$name
    #   {
      ## @doc The mode of the MQTT Bridge. Can be one of 'cluster_singleton' or 'cluster_shareload'</br>
      ##
      ## - cluster_singleton: create a unique MQTT connection within the emqx cluster.</br>
      ## In 'cluster_singleton' node, all messages toward the remote broker go through the same
      ## MQTT connection.</br>
      ## - cluster_shareload: create an MQTT connection on each node in the emqx cluster.</br>
      ## In 'cluster_shareload' mode, the incoming load from the remote broker is shared by
      ## using shared subscription.</br>
      ## Note that the 'clientid' is suffixed by the node name, this is to avoid
      ## clientid conflicts between different nodes. And we can only use shared subscription
      ## topic filters for 'remote_topic' of ingress connections.
      ## @path connectors.mqtt.$name.mode
      ## @type enum: cluster_shareload
      ## @default cluster_shareload
      #  mode = cluster_shareload

      ## @doc The host and port of the remote MQTT broker
      ## @path connectors.mqtt.$name.server
      ## @type emqx_schema:ip_port()
      #  server  =

      ## @doc Reconnect interval. Delay for the MQTT bridge to retry establishing the connection in case of transportation failure. Time interval is a string that contains a number followed by time unit:</br>
      ## - `ms` for milliseconds,
      ## - `s` for seconds,
      ## - `m` for minutes,
      ## - `h` for hours;
      ## </br>or combination of whereof: `1h5m0s`
      ## @path connectors.mqtt.$name.reconnect_interval
      ## @type string()
      ## @default 15s
      #  reconnect_interval = 15s

      ## @doc The MQTT protocol version
      ## @path connectors.mqtt.$name.proto_ver
      ## @type enum: v3 | v4 | v5
      ## @default v4
      #  proto_ver = v4

      ## @doc If enable bridge mode.
      ## NOTE: This setting is only for MQTT protocol version older than 5.0, and the remote MQTT
      ## broker MUST support this feature.
      ## @path connectors.mqtt.$name.bridge_mode
      ## @type boolean()
      ## @default false
      #  bridge_mode = false

      ## @doc The username of the MQTT protocol
      ## @path connectors.mqtt.$name.username
      ## @type binary()
      ## @default emqx
      #  username = emqx

      ## @doc The password of the MQTT protocol
      ## @path connectors.mqtt.$name.password
      ## @type binary()
      ## @default emqx
      #  password = emqx

      ## @doc The clean-start or the clean-session of the MQTT protocol
      ## @path connectors.mqtt.$name.clean_start
      ## @type boolean()
      ## @default true
      #  clean_start = true

      ## @doc MQTT Keepalive. Time interval is a string that contains a number followed by time unit:</br>
      ## - `ms` for milliseconds,
      ## - `s` for seconds,
      ## - `m` for minutes,
      ## - `h` for hours;
      ## </br>or combination of whereof: `1h5m0s`
      ## @path connectors.mqtt.$name.keepalive
      ## @type string()
      ## @default 300s
      #  keepalive = 300s

      ## @doc Message retry interval. Delay for the MQTT bridge to retry sending the QoS1/QoS2 messages in case of ACK not received. Time interval is a string that contains a number followed by time unit:</br>
      ## - `ms` for milliseconds,
      ## - `s` for seconds,
      ## - `m` for minutes,
      ## - `h` for hours;
      ## </br>or combination of whereof: `1h5m0s`
      ## @path connectors.mqtt.$name.retry_interval
      ## @type string()
      ## @default 15s
      #  retry_interval = 15s

      ## @doc Max inflight (sent, but un-acked) messages of the MQTT protocol
      ## @path connectors.mqtt.$name.max_inflight
      ## @type non_neg_integer()
      ## @default 32
      #  max_inflight = 32

      ## @path connectors.mqtt.$name.replayq
      #  replayq {
        ## @doc The dir where the replayq file saved.</br>
        ## Set to 'false' disables the replayq feature.
        ## @path connectors.mqtt.$name.replayq.dir
        ## @type union() boolean() | string()
        #  dir  =

        ## @doc The size in bytes of a single segment.</br>
        ## A segment is mapping to a file in the replayq dir. If the current segment is full, a new segment
        ## (file) will be opened to write.
        ## @path connectors.mqtt.$name.replayq.seg_bytes
        ## @type emqx_schema:bytesize()
        ## @default 100MB
        #  seg_bytes = 100MB

        ## @doc In offload mode, the disk queue is only used to offload queue tail segments.</br>
        ## The messages are cached in the memory first, then it writes to the replayq files after the size of
        ## the memory cache reaches 'seg_bytes'.
        ## @path connectors.mqtt.$name.replayq.offload
        ## @type boolean()
        ## @default false
        #  offload = false
      #   }

      ## @path connectors.mqtt.$name.ssl
      ## @link cluster.etcd.ssl
      #  ssl {
        ## @doc Trusted PEM format CA certificates bundle file.</br>
        ## The certificates in this file are used to verify the TLS peer's certificates.
        ## Append new certificates to the file if new CAs are to be trusted.
        ## There is no need to restart EMQX to have the updated file loaded, because
        ## the system regularly checks if file has been updated (and reload).</br>
        ## NOTE: invalidating (deleting) a certificate from the file will not affect
        ## already established connections.
        ## @path connectors.mqtt.$name.ssl.cacertfile
        ## @type binary()
        #  cacertfile  =

        ## @doc PEM format certificates chain file.</br>
        ## The certificates in this file should be in reversed order of the certificate
        ## issue chain. That is, the host's certificate should be placed in the beginning
        ## of the file, followed by the immediate issuer certificate and so on.
        ## Although the root CA certificate is optional, it should be placed at the end of
        ## the file if it is to be added.
        ## @path connectors.mqtt.$name.ssl.certfile
        ## @type binary()
        #  certfile  =

        ## @doc PEM format private key file.
        ## @path connectors.mqtt.$name.ssl.keyfile
        ## @type binary()
        #  keyfile  =

        ## @doc Enable or disable peer verification.
        ## @path connectors.mqtt.$name.ssl.verify
        ## @type enum: verify_peer | verify_none
        ## @default verify_none
        #  verify = verify_none

        ## @doc Enable TLS session reuse.
        ## @path connectors.mqtt.$name.ssl.reuse_sessions
        ## @type boolean()
        ## @default true
        #  reuse_sessions = true

        ## @doc Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path. So, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly; if 1 the path can be PEER, CA, ROOT-CA; if 2 the path can be PEER, CA, CA, ROOT-CA, and so on. The default value is 10.
        ## @path connectors.mqtt.$name.ssl.depth
        ## @type integer()
        ## @default 10
        #  depth = 10

        ## @doc String containing the user's password.
        ## Only used if the private key file is password-protected.
        ## @path connectors.mqtt.$name.ssl.password
        ## @type string()
        #  password = ""

        ## @doc All TLS/DTLS versions to be supported.</br>
        ## NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.</br>
        ## In case PSK cipher suites are intended, make sure to configured
        ## <code>['tlsv1.2', 'tlsv1.1']</code> here.
        ## @path connectors.mqtt.$name.ssl.versions
        ## @type array()
        ## @default [tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]
        #  versions = [tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]

        ## @doc This config holds TLS cipher suite names separated by comma,
        ## or as an array of strings. e.g.
        ## <code>"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256"</code> or
        ## <code>["TLS_AES_256_GCM_SHA384","TLS_AES_128_GCM_SHA256"]</code>.
        ## </br>
        ## Ciphers (and their ordering) define the way in which the
        ## client and server encrypts information over the network connection.
        ## Selecting a good cipher suite is critical for the
        ## application's data security, confidentiality and performance.
        ##
        ## The names should be in OpenSSL string format (not RFC format).
        ## All default values and examples provided by EMQX config
        ## documentation are all in OpenSSL format.</br>
        ##
        ## NOTE: Certain cipher suites are only compatible with
        ## specific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')
        ## incompatible cipher suites will be silently dropped.
        ## For instance, if only 'tlsv1.3' is given in the <code>versions</code>,
        ## configuring cipher suites for other versions will have no effect.
        ## </br>
        ##
        ## NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config</br>
        ## If PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.</br>
        ## PSK cipher suites: <code>"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,
        ## RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,
        ## RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,
        ## RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA"</code></br>
        ## @path connectors.mqtt.$name.ssl.ciphers
        ## @type array()
        ## @default ["TLS_AES_256_GCM_SHA384", "TLS_AES_128_GCM_SHA256", "TLS_CHACHA20_POLY1305_SHA256", "TLS_AES_128_CCM_SHA256", "TLS_AES_128_CCM_8_SHA256", "ECDHE-ECDSA-AES256-GCM-SHA384", "ECDHE-RSA-AES256-GCM-SHA384", "ECDHE-ECDSA-AES256-SHA384", "ECDHE-RSA-AES256-SHA384", "ECDH-ECDSA-AES256-GCM-SHA384", "ECDH-RSA-AES256-GCM-SHA384", "ECDH-ECDSA-AES256-SHA384", "ECDH-RSA-AES256-SHA384", "DHE-DSS-AES256-GCM-SHA384", "DHE-DSS-AES256-SHA256", "AES256-GCM-SHA384", "AES256-SHA256", "ECDHE-ECDSA-AES128-GCM-SHA256", "ECDHE-RSA-AES128-GCM-SHA256", "ECDHE-ECDSA-AES128-SHA256", "ECDHE-RSA-AES128-SHA256", "ECDH-ECDSA-AES128-GCM-SHA256", "ECDH-RSA-AES128-GCM-SHA256", "ECDH-ECDSA-AES128-SHA256", "ECDH-RSA-AES128-SHA256", "DHE-DSS-AES128-GCM-SHA256", "DHE-DSS-AES128-SHA256", "AES128-GCM-SHA256", "AES128-SHA256", "ECDHE-ECDSA-AES256-SHA", "ECDHE-RSA-AES256-SHA", "DHE-DSS-AES256-SHA", "ECDH-ECDSA-AES256-SHA", "ECDH-RSA-AES256-SHA", "ECDHE-ECDSA-AES128-SHA", "ECDHE-RSA-AES128-SHA", "DHE-DSS-AES128-SHA", "ECDH-ECDSA-AES128-SHA", "ECDH-RSA-AES128-SHA", "RSA-PSK-AES256-GCM-SHA384", "RSA-PSK-AES256-CBC-SHA384", "RSA-PSK-AES128-GCM-SHA256", "RSA-PSK-AES128-CBC-SHA256", "RSA-PSK-AES256-CBC-SHA", "RSA-PSK-AES128-CBC-SHA"]
        #  ciphers = ["TLS_AES_256_GCM_SHA384", "TLS_AES_128_GCM_SHA256", "TLS_CHACHA20_POLY1305_SHA256", "TLS_AES_128_CCM_SHA256", "TLS_AES_128_CCM_8_SHA256", "ECDHE-ECDSA-AES256-GCM-SHA384", "ECDHE-RSA-AES256-GCM-SHA384", "ECDHE-ECDSA-AES256-SHA384", "ECDHE-RSA-AES256-SHA384", "ECDH-ECDSA-AES256-GCM-SHA384", "ECDH-RSA-AES256-GCM-SHA384", "ECDH-ECDSA-AES256-SHA384", "ECDH-RSA-AES256-SHA384", "DHE-DSS-AES256-GCM-SHA384", "DHE-DSS-AES256-SHA256", "AES256-GCM-SHA384", "AES256-SHA256", "ECDHE-ECDSA-AES128-GCM-SHA256", "ECDHE-RSA-AES128-GCM-SHA256", "ECDHE-ECDSA-AES128-SHA256", "ECDHE-RSA-AES128-SHA256", "ECDH-ECDSA-AES128-GCM-SHA256", "ECDH-RSA-AES128-GCM-SHA256", "ECDH-ECDSA-AES128-SHA256", "ECDH-RSA-AES128-SHA256", "DHE-DSS-AES128-GCM-SHA256", "DHE-DSS-AES128-SHA256", "AES128-GCM-SHA256", "AES128-SHA256", "ECDHE-ECDSA-AES256-SHA", "ECDHE-RSA-AES256-SHA", "DHE-DSS-AES256-SHA", "ECDH-ECDSA-AES256-SHA", "ECDH-RSA-AES256-SHA", "ECDHE-ECDSA-AES128-SHA", "ECDHE-RSA-AES128-SHA", "DHE-DSS-AES128-SHA", "ECDH-ECDSA-AES128-SHA", "ECDH-RSA-AES128-SHA", "RSA-PSK-AES256-GCM-SHA384", "RSA-PSK-AES256-CBC-SHA384", "RSA-PSK-AES128-GCM-SHA256", "RSA-PSK-AES128-CBC-SHA256", "RSA-PSK-AES256-CBC-SHA", "RSA-PSK-AES128-CBC-SHA"]

        ## @doc EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.
        ## @path connectors.mqtt.$name.ssl.user_lookup_fun
        ## @type string()
        ## @default "emqx_tls_psk:lookup"
        #  user_lookup_fun = "emqx_tls_psk:lookup"

        ## @doc SSL parameter renegotiation is a feature that allows a client and a server
        ## to renegotiate the parameters of the SSL connection on the fly.
        ## RFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,
        ## you drop support for the insecure renegotiation, prone to MitM attacks.
        ## @path connectors.mqtt.$name.ssl.secure_renegotiate
        ## @type boolean()
        ## @default true
        #  secure_renegotiate = true

        ## @doc Enable TLS.
        ## @path connectors.mqtt.$name.ssl.enable
        ## @type boolean()
        ## @default false
        #  enable = false

        ## @doc Specify the host name to be used in TLS Server Name Indication extension.</br>
        ## For instance, when connecting to "server.example.net", the genuine server
        ## which accepts the connection and performs TLS handshake may differ from the
        ## host the TLS client initially connects to, e.g. when connecting to an IP address
        ## or when the host has multiple resolvable DNS records </br>
        ## If not specified, it will default to the host name string which is used
        ## to establish the connection, unless it is IP addressed used.</br>
        ## The host name is then also used in the host name verification of the peer
        ## certificate.</br> The special value 'disable' prevents the Server Name
        ## Indication extension from being sent and disables the hostname
        ## verification check.
        ## @path connectors.mqtt.$name.ssl.server_name_indication
        ## @type union() disable | string()
        #  server_name_indication = disable
      #   }
    #   }

 }
