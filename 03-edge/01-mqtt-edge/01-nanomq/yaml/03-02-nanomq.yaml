---
kind: DaemonSet
apiVersion: apps/v1
metadata:
  namespace: &app-namespace aiot-case
  name: &app-name nanomq
  # annotations:
  #   kubereloader.kubestation.aiot.hk/auto: "true"
spec:
  selector:
    matchLabels: &app-label
      app.kubernetes.io/name: nanomq
      app.kubernetes.io/component: server
      app.kubernetes.io/part-of: *app-namespace
      app.kubernetes.io/managed-by: kube
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 75%
  revisionHistoryLimit: 5

  template:
    metadata:
      labels:
        <<: *app-label

    spec:
      serviceAccountName: default
      automountServiceAccountToken: false

      terminationGracePeriodSeconds: 0
      nodeSelector:
        node-role.kubernetes.io/edge: ""
        node-role.kubernetes.io/aiot-case: ""
      tolerations:
        - operator: Exists

      hostIPC: false
      hostPID: false
      hostNetwork: true

      dnsPolicy: ClusterFirstWithHostNet
      dnsConfig:
        options:
          - name: single-request-reopen

      restartPolicy: Always

      volumes:
        - name: config
          configMap:
            name: nanomq
            items:
              - key: broker.conf
                path: broker.conf
              - key: auth.conf
                path: auth.conf
              - key: bridge.conf
                path: bridge.conf
              - key: webhook.conf
                path: webhook.conf
            defaultMode: 0644
            optional: true

        - name: cert
          secret:
            secretName: nanomq-cert
            defaultMode: 0644
            optional: true

      containers:
        - image: {{kubethings.image.repository}}/nanomq:{{kubethings.aiot.edge.nanomq.version}}-debug
          imagePullPolicy: {{kubethings.image.pullPolicy}}
          name: *app-name

          volumeMounts:
            - name: config
              subPath: broker.conf
              mountPath: /etc/nanomq/config/broker.conf.tpl
              readOnly: false
            - name: config
              subPath: auth.conf
              mountPath: /etc/nanomq/config/auth.conf.tpl
              readOnly: false
            - name: config
              subPath: bridge.conf
              mountPath: /etc/nanomq/config/bridge.conf.tpl
              readOnly: false
            - name: config
              subPath: webhook.conf
              mountPath: /etc/nanomq/config/webhook.conf.tpl
              readOnly: false

            - name: cert
              mountPath: /etc/nanomq/pki/
              readOnly: true

          envFrom:
            - configMapRef:
                name: nanomq-env
                optional: true
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP

          securityContext:
            runAsGroup: 0
            runAsUser: 0
            runAsNonRoot: false
            privileged: false
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false

          stdin: false
          tty: false
          terminationMessagePolicy: FallbackToLogsOnError
          terminationMessagePath: /dev/termination-log
          lifecycle:
            postStart:
              exec:
                command:
                  - /bin/bash
                  - -c
                  - |-
                    configFilePath='/etc/nanomq/config'
                    for configFile in $(ls ${configFilePath})
                    do
                        configFileName=$(echo -e ${configFile} | awk -F '.' '{print $1}')
                        cp -rfv ${configFilePath}/${configFileName}.conf.tpl ${configFilePath}/${configFileName}.conf
                    done

                    echo -e '' >> ${configFilePath}/bridge.conf
                    echo -e $(echo -e "${NANOMQ_BRIDGE__MQTT__ADDRESS}") >> ${configFilePath}/bridge.conf
                    echo -e $(echo -e "${NANOMQ_BRIDGE__MQTT__CLIENTID}") >> ${configFilePath}/bridge.conf

                    echo -e '' >> ${configFilePath}/webhook.conf
                    echo -e $(echo -e "${NANOMQ_WEBHOOK__URL}") >> ${configFilePath}/webhook.conf
          # https://nanomq.io/docs/zh/latest/toolkit.html#broker
          command:
            - /usr/local/bin/nanomq
            - broker
            - start
            - --conf=/etc/nanomq/config/broker.conf
            - --auth=/etc/nanomq/config/auth.conf
            - --bridge=/etc/nanomq/config/bridge.conf
            - --webhook=/etc/nanomq/config/webhook.conf

          ports:
            - name: tcp
              protocol: TCP
              containerPort: &port-tcp 1883
            - name: tcp-tls
              protocol: TCP
              containerPort: &port-tcp-tls 8883
            - name: websocket
              protocol: TCP
              containerPort: &port-websocket 8083
            - name: websocket-tls
              protocol: TCP
              containerPort: &port-websocket-tls 8084
            - name: api
              protocol: TCP
              containerPort: &port-api 8082
          # startupProbe:
          #   tcpSocket:
          #     port: *port-tcp-tls
          #   initialDelaySeconds: 0
          #   periodSeconds: 5
          #   timeoutSeconds: 2
          #   successThreshold: 1
          #   failureThreshold: 24
          # # readinessProbe:
          # #   tcpSocket:
          # #     port: *port-tcp-tls
          # #   initialDelaySeconds: 0
          # #   periodSeconds: 5
          # #   timeoutSeconds: 1
          # #   successThreshold: 1
          # #   failureThreshold: 1
          # livenessProbe:
          #   tcpSocket:
          #     port: *port-tcp-tls
          #   initialDelaySeconds: 0
          #   periodSeconds: 5
          #   timeoutSeconds: 2
          #   successThreshold: 1
          #   failureThreshold: 2
