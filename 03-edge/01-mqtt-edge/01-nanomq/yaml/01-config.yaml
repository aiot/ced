# https://github.com/emqx/nanomq/blob/{{kubethings.aiot.edge.nanomq.version}}/README.md#nanomq-environment-variables
---
kind: ConfigMap
apiVersion: v1
metadata:
  namespace: aiot-case
  name: nanomq-env
immutable: false
data:
  NANOMQ_CONF_PATH: /etc/nanomq/config/broker.conf
  NANOMQ_AUTH_CONF_PATH: /etc/nanomq/config/auth.conf
  NANOMQ_WEBHOOK_CONF_PATH: /etc/nanomq/config/webhook.conf
  NANOMQ_BRIDGE_CONF_PATH: /etc/nanomq/config/bridge.conf

  # note: this is a fake value, please replace it with the actual value
  NANOMQ_WEBHOOK__URL: https://nanomq-webhook-server.${POD_NAMESPACE}.svc.cluster.local

  NANOMQ_BRIDGE__MQTT__ADDRESS: mqtt-tcp://mqtt-cloud.${POD_NAMESPACE}.svc.cluster.local:1883
  # NANOMQ_BRIDGE__MQTT__CLIENTID: ${POD_NAMESPACE}_${NODE_NAME}_${NODE_IP}

# https://nanomq.io/docs/zh/latest/config-description.html
---
kind: ConfigMap
apiVersion: v1
metadata:
  namespace: aiot-case
  name: nanomq
immutable: false
data:
  # https://github.com/emqx/nanomq/blob/{{kubethings.aiot.edge.nanomq.version}}/etc/nanomq.conf
  broker.conf: |

    daemon = false
    num_taskq_thread = 8
    max_taskq_thread = 16
    parallel = 64

    # mqtt
    property_size = 32
    msq_len = 128

    # tcp
    url = nmq-tcp://127.0.0.1:1883
    tls.url = tls+nmq-tcp://0.0.0.0:8883
    tls.keyfile = /etc/nanomq/pki/tls.key
    tls.certfile = /etc/nanomq/pki/tls.crt
    tls.cacertfile = /etc/nanomq/pki/ca.crt
    tls.enable = true
    tls.verify_peer = true
    tls.fail_if_no_peer_cert = true

    # websocket
    # bug: nanomq does not listens on websocket.tls_url
    websocket.enable = true
    websocket.url = nmq-ws://127.0.0.1:8083/mqtt
    websocket.tls_url = nmq-wss://0.0.0.0:8084/mqtt

    # auth
    allow_anonymous = false

    # http api
    http_server.enable = true
    http_server.port = 8082
    http_server.auth_type = basic
    http_server.username = mqtt-edge
    http_server.password = mqtt-edge
    # http_server.auth_type = jwt
    # http_server.jwt.private.keyfile = /etc/nanomq/pki/jwt/rs256.key
    # http_server.jwt.public.keyfile = /etc/nanomq/pki/jwt/rs256.pub

  # https://github.com/emqx/nanomq/blob/{{kubethings.aiot.edge.nanomq.version}}/etc/nanomq_auth_username.conf
  auth.conf: |

    auth.1.login = device
    auth.1.password = device

    auth.2.login = mqttx
    auth.2.password = mqttx

  # https://github.com/emqx/nanomq/blob/{{kubethings.aiot.edge.nanomq.version}}/etc/nanomq_web_hook.conf
  webhook.conf: |

    web.hook.enable = false

    # web.hook.url = https://nanomq-webhook-server.${POD_NAMESPACE}.svc.cluster.local
    web.hook.ssl.verify = false
    web.hook.ssl.server_name_indication = false
    # web.hook.ssl.keyfile=
    # web.hook.ssl.certfile=
    # web.hook.ssl.cacertfile
    web.hook.headers.content-type = application/json
    web.hook.body.encoding_of_payload_field = plain
    web.hook.pool_size = 32

    # event
    # web.hook.rule.<hook-name>.<number> = <event>
    # client online
    # web.hook.rule.client.connected.1 = {"action": "on_client_connected"}
    # client offline
    # web.hook.rule.client.disconnected.1 = {"action": "on_client_disconnected"}
    # server receives the ACK message that sent by client
    # web.hook.rule.message.acked.1 = {"action": "on_message_acked"}

  # warning: not support tls
  # https://github.com/emqx/nanomq/blob/{{kubethings.aiot.edge.nanomq.version}}/etc/nanomq_bridge.conf
  bridge.conf: |

    bridge.mqtt.parallel = 64

    # bridge.mqtt.address = mqtt-tcp://mqtt-cloud.${POD_NAMESPACE}.svc.cluster.local:1883
    bridge.mqtt.proto_ver = 5
    bridge.mqtt.username = mqtt-edge
    bridge.mqtt.password = mqtt-edge
    bridge.mqtt.keepalive = 60
    bridge.mqtt.clean_start = true

    # bridge.mqtt.clientid = ${POD_NAMESPACE}_${NODE_NAME}_${NODE_IP}
    bridge.mqtt.bridge_mode = true
    # publish(push) message to mqtt-cloud
    bridge.mqtt.forwards = device001/#,device002/#
    # subscribe message from mqtt-cloud (mqtt-cloud push msg to mqtt-edge)
    bridge.mqtt.subscription.1.topic = command/device001
    bridge.mqtt.subscription.1.qos=1
    bridge.mqtt.subscription.2.topic = command/device002
    bridge.mqtt.subscription.2.qos=1
